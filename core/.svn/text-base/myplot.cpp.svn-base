#include "myplot.h"
#include <qwt_plot_canvas.h>
#include <QPen>

MyPlot::MyPlot(int nType,QWidget *parent) :
    QwtPlot(parent),
    grid(NULL),
    d_picker(NULL),
    legend(NULL),
    m_fminX(0.0),
    m_fmaxX(0.0),
    m_fminY(0.0),
    m_fmaxY(0.0)
{
    setAutoReplot(true);
    setGeometry(parent->rect());
    // axis title
   if(0 == nType)
   {
       setAxisScale(QwtPlot::xBottom, -4, 4);
       setAxisScale(QwtPlot::yLeft, 0, 50);
       setCanvasBackground( QColor(224,248,254));
   }else if(1 == nType)
   {
//       insertLegend( new QwtLegend(),QwtPlot::RightLegend);//title position
       setAxisTitle( QwtPlot::xBottom, QString::fromUtf8("波长/nm" ) );
       setAxisTitle( QwtPlot::yLeft, QString::fromUtf8("强度/counts" ));
       setAxisScale(QwtPlot::xBottom, 200, 400);
       setAxisScale(QwtPlot::yLeft, 0, 65535);
       setCanvasBackground( QColor(224,248,254));
   }else if(2 == nType)
   {
       setAxisTitle( QwtPlot::xBottom, QString::fromUtf8("序号" ) );
       setAxisTitle( QwtPlot::yLeft, QString::fromUtf8("浓度" ));
       setAxisScale(QwtPlot::xBottom, 0, 20);
       setAxisScale(QwtPlot::yLeft, -10, 250);
       setCanvasBackground( QColor(224,248,254));
   }
   else if(3 == nType)
   {
      // insertLegend( new QwtLegend(),QwtPlot::RightLegend);//title position
       setAxisTitle( QwtPlot::xBottom, QString::fromUtf8("电压" ) );
       setAxisTitle( QwtPlot::yLeft, QString::fromUtf8("电流" ));
       setCanvasBackground( QColor(210,220,234));
   }
   else if(4 == nType)
   {
        insertLegend( new QwtLegend(),QwtPlot::RightLegend);//title position
        setCanvasBackground( QColor(224,230,243));
   }
   else if(5 == nType)
   {
        insertLegend( new QwtLegend(),QwtPlot::RightLegend);//title position
        setCanvasBackground( QColor(0,0,0));
//        setAxisTitle( QwtPlot::xBottom, QString::fromUtf8("Time [m:s]" ) );
//        setAxisTitle( QwtPlot::yLeft, QString::fromUtf8("Signal[uV]" ));
        enableAxis(QwtPlot::yRight);
//        setAxisTitle( QwtPlot::yRight, QString::fromUtf8("Tempt[℃]" ));
        setAxisScale(QwtPlot::yRight, 0, 300);
   }
   else if(6 == nType)
   {
       setCanvasBackground( QColor(224,248,254));
   }
   else if(7 == nType)
   {
       insertLegend( new QwtLegend(),QwtPlot::BottomLegend);//title position
       setAxisTitle( QwtPlot::xBottom, QString::fromUtf8("序号" ) );
       setAxisTitle( QwtPlot::yLeft, QString::fromUtf8("浓度" ));
   }
   else if(8 == nType)
   {
       insertLegend( new QwtLegend(),QwtPlot::BottomLegend);//title position
       setAxisTitle( QwtPlot::xBottom, QString::fromUtf8("序号" ) );
       setAxisTitle( QwtPlot::yLeft, QString::fromUtf8("状态值" ));
   }
   else if(9 == nType)
   {
       setAxisScale(QwtPlot::xBottom, 160, 950);
       setAxisScale(QwtPlot::yLeft, 0, 1);
       insertLegend( new QwtLegend(),QwtPlot::RightLegend);//title position
       setAxisTitle( QwtPlot::xBottom, QString::fromUtf8("波长(nm)" ) );
       setAxisTitle( QwtPlot::yLeft, QString::fromUtf8("吸光度" ));
       setCanvasBackground( QColor(210,220,234));
   }else if(10 == nType)
   {
       setAxisScale(QwtPlot::xBottom, 160, 950);
       setAxisScale(QwtPlot::yLeft, 900, 2000);
       setCanvasBackground( QColor(224,248,254));
   }
    //grid
    QwtPlotGrid *grid = new QwtPlotGrid();
    grid->enableXMin( true );
    grid->enableYMin( true );
    grid->setMajorPen( QPen( Qt::white, 0, Qt::DotLine ) );
    grid->setMinorPen( QPen( Qt::gray, 0 , Qt::DotLine ) );
    grid->attach( this );
   //canvas
   QwtPlotCanvas *canvas = new QwtPlotCanvas();
   canvas->setLineWidth( 1 );
   canvas->setFrameStyle( QFrame::Box | QFrame::Plain );
   canvas->setBorderRadius( 5 );
   setCanvas( canvas );

   d_picker = new QwtPlotPicker( QwtPlot::xBottom, QwtPlot::yLeft,
       QwtPlotPicker::CrossRubberBand, QwtPicker::AlwaysOn,
      canvas );
   d_picker->setStateMachine( new QwtPickerDragPointMachine() );
   d_picker->setRubberBandPen( QColor( Qt::red ) );
   d_picker->setRubberBand( QwtPicker::CrossRubberBand );
   d_picker->setTrackerPen( QColor( Qt::blue ) );
   // panning with the left mouse button
//   (void )new QwtPlotPanner( canvas() );

//   // zoom in/out with the wheel
//   QwtPlotMagnifier *magnifier = new QwtPlotMagnifier( canvas() );
//   magnifier->setMouseButton( Qt::NoButton );
}
MyPlot::~MyPlot()
{
    for(int i = 0;i < m_vtCurve.size();i++)
    {
        delete m_vtCurve[i];
        m_vtCurve[i] = NULL;
    }
    delete grid;
    delete d_picker;
    delete legend;
}
void MyPlot::RefreshAxis(const QVector<double> &xData,const QVector<double> &yData)
{
    if(xData.size() > 0)
    {
        m_fminX = xData[0];
        m_fmaxX = xData[0];
        for(int i = 0; i < xData.size(); i++)
        {
            if(xData[i] < m_fminX)
                m_fminX = xData[i];
            else if(xData[i] > m_fmaxX)
                m_fmaxX = xData[i];
        }
        this->setAxisScale(QwtPlot::xBottom, m_fminX, m_fmaxX);
    }
    if(yData.size() > 0)
    {
        m_fminY = yData[0];
        m_fmaxY = yData[0];
        for(int i = 0; i < yData.size(); i++)
        {
            if(yData[i] < m_fminY)
                m_fminY = yData[i];
            else if(yData[i] > m_fmaxY)
                m_fmaxY = yData[i];
        }
        m_fmaxY = m_fmaxY + fabs(m_fmaxY/20);
        this->setAxisScale(QwtPlot::yLeft, m_fminY, m_fmaxY);
    }
}
void MyPlot::RefreshAxisY(const QVector<double> &yData)
{
    if(yData.size() > 0)
    {
        m_fminY = yData[0];
        m_fmaxY = yData[0];
        for(int i = 0; i < yData.size(); i++)
        {
            if(yData[i] < m_fminY)
                m_fminY = yData[i];
            else if(yData[i] > m_fmaxY)
                m_fmaxY = yData[i];
        }
        m_fmaxY = m_fmaxY + fabs(m_fmaxY/10);
        this->setAxisScale(QwtPlot::yLeft, m_fminY, m_fmaxY);
    }
}
void MyPlot::RefreshAxisX(const QVector<double> &xData)
{
    if(xData.size() > 0)
    {
        m_fminX = xData[0];
        m_fmaxX = xData[0];
        for(int i = 0; i < xData.size(); i++)
        {
            if(xData[i] < m_fminX)
                m_fminX = xData[i];
            else if(xData[i] > m_fmaxX)
                m_fmaxX = xData[i];
        }
        this->setAxisScale(QwtPlot::xBottom, m_fminX, m_fmaxX);
    }
}
void MyPlot::RemoveCurve()
{
    for(int i = 0;i < m_vtCurve.size();i++)
    {
        m_vtCurve[i]->itemChanged();
        delete m_vtCurve[i];
        m_vtCurve[i] = NULL;
    }
    m_vtCurve.clear();
}
int MyPlot::AddCurve(QString qsName,const QVector<double> &xData, const QVector<double> &yData,Qt::GlobalColor color,int axis)
{
    //add curves
//    m_vtCurve.clear();
//    QwtPlot::detachItems();
    QwtPlotCurve* curve = new QwtPlotCurve(qsName);
    curve->setRenderHint( QwtPlotItem::RenderAntialiased );
    curve->setPen( QPen( color ) );
    curve->setLegendAttribute( QwtPlotCurve::LegendShowLine );
    curve->attach( this );
    curve->setYAxis(axis);
    curve->setSamples(xData, yData);
    m_vtCurve.push_back(curve);
    return m_vtCurve.size();
}
int MyPlot::AddCurve(QString qsName,const vector<double> &xData, const vector<double> &yData,Qt::GlobalColor color)
{
    QVector<double> x,y;
    for(int i = 0;i< xData.size(); i++)
    {
        x.push_back(xData[i]);
        y.push_back(yData[i]);
    }
    this->RefreshAxis(x,y);

    QwtPlotCurve* curve = new QwtPlotCurve(qsName);
    curve->setRenderHint( QwtPlotItem::RenderAntialiased );
    curve->setPen( QPen( color ) );
    curve->setLegendAttribute( QwtPlotCurve::LegendShowLine );
    curve->attach( this );
    curve->setSamples(x, y);
    m_vtCurve.push_back(curve);
    return m_vtCurve.size();
}
