#include "bssetparam.h"
#include "ui_bssetparam.h"
#include <QTextCodec>
#include "QDesktopWidget"
#include <QMessageBox>
#include "dlgremindmessage.h"

bsSetParam::bsSetParam(CMainCtrl* pMC,int nUserType,QWidget *parent) :
    QDialog(parent),
    ui(new Ui::bsSetParam)
{
    ui->setupUi(this);
    m_pMC = pMC;
    this->setWindowFlags(Qt::FramelessWindowHint);

    QTextCodec *codec = QTextCodec::codecForName("UTF-8");
    QTextCodec::setCodecForLocale(codec);
    QTextCodec::setCodecForCStrings(codec);
    QTextCodec::setCodecForTr(codec);
    m_pDb = new CDBBusiness("yqdata","yq.db");
    //sfkey = new SfKeyboard(this);
    //sfkey->hide();
    //m_dict = new paramdict();
    ui->litModAddre->setFocus();
    this->GetParamDictList();

    connect(ui->tabWidParam, SIGNAL(cellChanged(int,int)), this, SLOT(changeCheckBox(int, int)));


    ui->cbxUnitName->clear();
    ui->cbxUnitName->addItem("μg/L","0");
    ui->cbxUnitName->addItem("mg/L","1");

    ui->cbxUnitName->setCurrentIndex(0);

    QString qsCodeName = ui->tabWidParam->item(0,0)->text();
    GetYQsList(qsCodeName);

    QString sText,sValue;
    sText = "重金属";
    sValue = "1";
    ui->cbxProcessType->addItem(sText,sValue);

    sText = "紫外烟气";
    sValue = "2";
    ui->cbxProcessType->addItem(sText,sValue);

    sText = "有机物";
    sValue = "3";
    ui->cbxProcessType->addItem(sText,sValue);

    sText = "比色法";
    sValue = "4";
    ui->cbxProcessType->addItem(sText,sValue);

    sText = "原子荧光";
    sValue = "5";
    ui->cbxProcessType->addItem(sText,sValue);

     int iYQType = GetAfxYQType();
     ui->cbxProcessType->setCurrentIndex(ui->cbxProcessType->findData(iYQType));
}

bsSetParam::~bsSetParam()
{
    //delete m_dict;
    delete m_pDb;
    delete checkBox;
    delete ui;
}

void bsSetParam::changeCheckBox(int row, int col)
{
    if(2 == CConfig::GetAfxUserType())
    {
        dlgRemindMessage *pRemind= new dlgRemindMessage(m_pMC,1);
        pRemind->exec();
        delete pRemind;
        pRemind = NULL;
        return;
    }
    if(ui->tabWidParam->rowCount() > 0 && row >= 0 && col >= 0)
    {
        SYQPARAM sYQ;
        QString strCodeName = ui->tabWidParam->item(row,col)->text().trimmed();//取出字符串
        if(strCodeName.length() > 0)
        {
            vector<paramitem>::iterator it;
            paramdict dict;
            for(it=dict.paramlist.begin();it<dict.paramlist.end();it++)
            {
               if(strCodeName == (*it).CodeName)
               {
                   strcpy(sYQ.czID,(*it).LHCodeID);
                   break;
               }
            }
        }

        if(ui->tabWidParam->item(row, col)->checkState() == Qt::Checked) //选中
        {
            if(0 != strcmp(sYQ.czID,""))
            {
                 bool isResult = false;
                 isResult = m_pDb->InsYQ(sYQ);
                 QString qsMsgBox;
                 if(isResult)
                 {
                     qsMsgBox = "参数添加成功";
                     isResult = InitCurveManger(sYQ.czID);
                     if(isResult)
                     {
                         qsMsgBox += ",曲线添加成功！";
                     }
                     else
                     {
                         qsMsgBox += "!";
                     }
                     QMessageBox::information(NULL, "提示信息", qsMsgBox);
                 }
                 else
                 {
                     QMessageBox::information(NULL, "提示信息", "添加失败!");
                 }
            }
        }
        else if(ui->tabWidParam->item(row, col)->checkState() == Qt::Unchecked)
        {
            if(0 != strcmp(sYQ.czID,""))
            {
                bool isResult;
                isResult = m_pDb->DelYQ(sYQ);
                if(isResult)
                {
                    QMessageBox::information(NULL,"提示信息", "删除成功!");
                }
                else
                {
                    QMessageBox::information(NULL, "提示信息", "删除失败!");
                }
            }
        }
    }
}

bool bsSetParam::InitCurveManger(const char* czID)
{
    bool isResult = false;    
    if(strlen(czID) > 0)
    {      
        struCurveInfo item2;
        strcpy(item2.czID,czID);
        item2.CalcMode = 0;
        item2.DataTime = QDateTime::currentDateTime();
        item2.R = 0;
        item2.K = 0;
        item2.B = 0;
        item2.MinValue = 0;
        item2.MaxValue = 100;
        item2.BlankAbsorb = 0;
        item2.StdAbsorb = 0;

        BsCurveDotInfo4 item1;
        strcpy(item1.czID,czID);
        item1.fChroma = 0;
        item1.fAbsorbency = 0;

        isResult = m_pDb->InitCurveDataInfo(item1,item2);
    }
    return isResult;
}

void bsSetParam::GetParamDictList()
{
    paramdict dict;
    int iParamCout = dict.paramlist.size();
    if(iParamCout > 0)
    {
        //隐藏表头
        ui->tabWidParam->horizontalHeader()->setVisible(false);
        ui->tabWidParam->verticalHeader()->setVisible(false);
        ui->tabWidParam->setShowGrid(false); //设置不显示格子线
        ui->tabWidParam->setSelectionBehavior(QAbstractItemView::SelectRows);  //设置选择行为时每次选择一行
        ui->tabWidParam->setEditTriggers(QAbstractItemView::NoEditTriggers);
        ui->tabWidParam->setRowCount(iParamCout);
        ui->tabWidParam->setColumnCount(1);

        QHeaderView *pTableHeaderView = ui->tabWidParam->horizontalHeader();
        if (pTableHeaderView)
        {
            pTableHeaderView->setDefaultAlignment (Qt::AlignVCenter); //居中
            pTableHeaderView->setTextElideMode (Qt::ElideRight); //...效果
            pTableHeaderView->setStretchLastSection (true); //尾不留空白
        }

        int iRow = 0;
        sqlite_data datalist;
        bool isResult = m_pDb->GetYQCode(datalist);
        vector<paramitem>::iterator it;
        for(it=dict.paramlist.begin();it<dict.paramlist.end();it++)
        {
            checkBox = new QTableWidgetItem((*it).CodeName);
            checkBox->setCheckState(Qt::Unchecked);
            if(isResult)
            {
                for(int i = 1;i<=datalist.RowCount();i++)
                {
                    if(0 == strcmp((*it).LHCodeID,datalist.GetData(i,1)))
                    {
                        checkBox->setCheckState(Qt::Checked);
                        break;
                    }
                }
            }
            ui->tabWidParam ->setItem(iRow, 0, checkBox);
            iRow ++;
        }
        datalist.Free();
    }
}
//还原默认值
void bsSetParam::on_butRestoreDefault_clicked()
{
    if(NULL != ui->tabWidParam->currentItem())
    {
        QString qsCodeName = ui->tabWidParam->currentItem()->text().trimmed();
        if(qsCodeName.length() > 0)
        {
            paramdict dict;
            if(dict.paramlist.size() > 0)
            {
                vector<paramitem>::iterator it;
                for(it=dict.paramlist.begin();it<dict.paramlist.end();it++)
                {
                   if(qsCodeName == (*it).CodeName)
                   {
                       ui->litModAddre->setText(QString("%1").arg((*it).SlaveID));
                       if((*it).parcode4.UnitType == Unit_HK)
                           ui->cbxUnitName->setCurrentIndex(1);
                       else if((*it).parcode4.UnitType == Unit_WK)
                           ui->cbxUnitName->setCurrentIndex(0);
                       else
                           ui->cbxUnitName->setCurrentIndex(0);
                       ui->litDataDigits->setText(QString::number((*it).DataDigits));//小数位数
                       ui->litMin->setText(QString("%1").arg((*it).Min));//量程下限
                       ui->litMax->setText(QString("%1").arg((*it).Max));//量程上限
                       break;
                   }
                }
            }
        }
    }
}

//保存
void bsSetParam::on_butSave_clicked()
{
    if(NULL != ui->tabWidParam->currentItem())
    {
        QString qsCodeName = ui->tabWidParam->currentItem()->text();
        if(qsCodeName.length() > 0)
        {
            paramdict dict;
            if(dict.paramlist.size() > 0)
            {
                QString qsCodeID;
                int iCalcWay;
                vector<paramitem>::iterator it; 
                for(it=dict.paramlist.begin();it<dict.paramlist.end();it++)
                {
                   if(qsCodeName == (*it).CodeName)
                   {
                       qsCodeID = (*it).LHCodeID;
                       iCalcWay =  (*it).CalcWay;  //读取AD值方式
                       break;
                   }
                }

                if(qsCodeID.length() > 0)
                {
                    char czGroup[64];memset(czGroup,0,64);
                    sprintf(czGroup,"%s_SET",qsCodeID.toLatin1().data());

                    char czItem[64];memset(czItem,0,64);
                    char czValue[64];memset(czValue,0,64);

                    //流程类型
                    strcpy(czItem,"ProcessType");
                    strcpy(czValue,ui->cbxProcessType->itemData(ui->cbxProcessType->currentIndex()).toString().toLatin1().data());
                    GetAfxConfig()->SetIni(czGroup,czItem,czValue);

                    //参数名称
                    if(qsCodeName.length() > 0)
                    {
                        memset(czItem,0,64);
                        memset(czValue,0,64);
                        strcpy(czValue,QString((*it).CodeName).toLatin1().data());
                        strcpy(czItem,"Name");
                        GetAfxConfig()->SetIni(czGroup,czItem,(*it).CodeName);
                    }

                    //读取基线值式
                    memset(czItem,0,64);
                    memset(czValue,0,64);
                    sprintf(czValue,"%d",iCalcWay);
                    strcpy(czItem,"CalcWay");
                    GetAfxConfig()->SetIni(czGroup,czItem,czValue);

                    //Modbus地址
                    if(ui->litModAddre->text().trimmed().length() > 0)
                    {
                        memset(czItem,0,64);
                        memset(czValue,0,64);
                        strcpy(czValue,ui->litModAddre->text().trimmed().simplified().toLatin1().data());
                        strcpy(czItem,"SlaveID");
                        GetAfxConfig()->SetIni(czGroup,czItem,czValue);
                    }
                    //数据精度
                    if(ui->litDataDigits->text().trimmed().length() > 0)
                    {
                        memset(czItem,0,64);
                        memset(czValue,0,64);
                        strcpy(czValue,ui->litDataDigits->text().trimmed().simplified().toLatin1().data());
                        strcpy(czItem,"DataDigits");
                        GetAfxConfig()->SetIni(czGroup,czItem,czValue);
                    }

                    if(ui->cbxUnitName->currentIndex() >= 0)
                    {
                        //单位
                        memset(czItem,0,64);
                        memset(czValue,0,64);
                        switch(ui->cbxUnitName->currentIndex())
                        {
                            case 0:
                                sprintf(czValue,"%d",Unit_WK);
                            break;
                            case 1:
                                sprintf(czValue,"%d",Unit_HK);
                            break;
                        }
                        strcpy(czItem,"UnitType");
                        GetAfxConfig()->SetIni(czGroup,czItem,czValue);
                    }

                    //量程下限
                    if(ui->litMin->text().trimmed().length() > 0)
                    {
                        memset(czItem,0,64);
                        memset(czValue,0,64);
                        strcpy(czValue,ui->litMin->text().trimmed().simplified().toLatin1().data());
                        strcpy(czItem,"Min");
                        GetAfxConfig()->SetIni(czGroup,czItem,czValue);
                    }

                    //量程上限
                    if(ui->litMax->text().trimmed().length() > 0)
                    {
                        memset(czItem,0,64);
                        memset(czValue,0,64);
                        strcpy(czValue,ui->litMax->text().trimmed().simplified().toLatin1().data());
                        strcpy(czItem,"Max");
                        GetAfxConfig()->SetIni(czGroup,czItem,czValue);
                    }

                    //标样浓度
                    if(ui->litSampleChroma->text().trimmed().length() > 0)
                    {
                        memset(czItem,0,64);
                        memset(czValue,0,64);
                        strcpy(czValue,ui->litSampleChroma->text().trimmed().simplified().toLatin1().data());
                        strcpy(czItem,"SampleChroma");
                        GetAfxConfig()->SetIni(czGroup,czItem,czValue);
                    }
                    m_pMC->pYQs->UpdateYQInfo();
                    QMessageBox::information(NULL, "提示信息", "保存成功!");
                }
            }
        }
        else
        {
             QMessageBox::information(NULL, "提示信息", "请选择参数!");
        }
    }
    else
    {
        QMessageBox::information(NULL, "提示信息", "请选择参数!");
    }
}

//关闭
void bsSetParam::on_butClose_clicked()
{
    ((MyInputPanelContext*)(qApp->inputContext()))->close();
    this->close();
}

void bsSetParam::on_tabWidParam_itemClicked(QTableWidgetItem *item)
{
    if(NULL != item)
    {
        QString qsCodeName = item->text().trimmed();
        if(qsCodeName.length() > 0)
        {
            GetYQsList(qsCodeName);
        }
    }
}

void bsSetParam::GetYQsList(QString qsCodeName)
{
    if(qsCodeName.trimmed().length() > 0)
    {
        paramdict dict;
        int iParamCount = dict.paramlist.size();
        if(iParamCount > 0)
        {
            ui->litModAddre->setText("");
            ui->litDataDigits->setText("");
            ui->cbxUnitName->setCurrentIndex(0);
            ui->litMax->setText("");
            ui->litMin->setText("");
            QString qsCodeID;
            vector<paramitem>::iterator it;
            for(it=dict.paramlist.begin();it<dict.paramlist.end();it++)
            {
               if(qsCodeName == (*it).CodeName)
               {
                   qsCodeID = QString((*it).LHCodeID);//参数代码
                   ui->litModAddre->setText(QString("%1").arg((*it).SlaveID));//Modbus协议地址
                     ui->cbxProcessType->setCurrentIndex(ui->cbxProcessType->findData((*it).iProcessType));
                   if((*it).parcode4.UnitType == Unit_WK)
                       ui->cbxUnitName->setCurrentIndex(0);
                   else if((*it).parcode4.UnitType == Unit_HK)
                       ui->cbxUnitName->setCurrentIndex(1);
                   else
                       ui->cbxUnitName->setCurrentIndex(0);
                   ui->litDataDigits->setText(QString::number((*it).DataDigits));//小数位数
                   ui->litMin->setText(QString("%1").arg((*it).Min));//量程下限
                   ui->litMax->setText(QString("%1").arg((*it).Max));//量程上限
                   ui->litSampleChroma->setText(QString("%1").arg((*it).SampleChroma));//标样浓度
                   break;
               }
            }
            if(qsCodeID.trimmed().length() > 0)
            {
                SYQPARAM sYQ;
                strcpy(sYQ.czID,qsCodeID.toLatin1().data());
                CYQ* pYQ = m_pMC->pYQs->GetYQ(sYQ.czID);
                if(pYQ)
                {
                    pYQ->GetYQParam(sYQ);
                    ui->litModAddre->setText(QString::number(sYQ.SlaveID));//Modbus协议地址
                    ui->cbxProcessType->setCurrentIndex(ui->cbxProcessType->findData(sYQ.iProcessType));
                    if(pYQ->m_sYQ.UnitType == Unit_WK)
                        ui->cbxUnitName->setCurrentIndex(0);
                    else if(pYQ->m_sYQ.UnitType == Unit_HK)
                        ui->cbxUnitName->setCurrentIndex(1);
                    else
                        ui->cbxUnitName->setCurrentIndex(0);
                    ui->litDataDigits->setText(QString::number(pYQ->m_sYQ.DataDigits));//小数位数
                    ui->litMin->setText(QString("%1").arg(pYQ->m_sYQ.Min));//量程下限
                    ui->litMax->setText(QString("%1").arg(pYQ->m_sYQ.Max));//量程上限
                    ui->litSampleChroma->setText(QString("%1").arg(pYQ->m_CurveInfo.CheckChroma));
                }
            }
        }
    }
}
