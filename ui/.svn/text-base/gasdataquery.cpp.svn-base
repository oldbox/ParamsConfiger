#include "gasdataquery.h"
#include "ui_gasdataquery.h"
#include <QTextCodec>
#include "../core/paramdict.h"
#include "QMessageBox"
#include <QScrollBar>

gasdataquery::gasdataquery(CMainCtrl* pMC,QWidget *parent) :
    QDialog(parent),  
    startState(false),
    endState(false),
    Timer(new QTimer),
    QueryTimer(new QTimer),
    ui(new Ui::gasdataquery)
{
    ui->setupUi(this);
    m_pMC = pMC;

    QTextCodec *codec = QTextCodec::codecForName("UTF-8");
    QTextCodec::setCodecForLocale(codec);
    QTextCodec::setCodecForCStrings(codec);
    QTextCodec::setCodecForTr(codec);
    this->setWindowFlags(Qt::FramelessWindowHint);

    ui->lineStartTimDisp->setText(QDate::currentDate().toString("yyyy-MM-dd 00"));
    ui->lineEndTimDisp->setText(QDate::currentDate().toString("yyyy-MM-dd 23"));
    connect(ui->tabwidData->horizontalHeader(),SIGNAL(sectionClicked(int)),this, SLOT(onHeaderClicked(int)));
    connect(Timer, SIGNAL(timeout()), this, SLOT(OnHideWordMovie()));
    connect(QueryTimer, SIGNAL(timeout()), this, SLOT(OnQueryData()));


    ui->calendarStartTim->hide();
    ui->calendarEndTim->hide();
    ui->labelTatolNum->setText("0");
    ui->CheckDataID->setChecked(true);

    //启动数据导出中...Movie
    WordMovie =  new QMovie(":/res/Movie.gif");
    WordMovie->start();
    ui->labelMovie->setMovie(WordMovie);
    ui->labelWord->hide();
    ui->labelMovie->hide();
}

gasdataquery::~gasdataquery()
{
    delete ui;
    delete Timer;
    delete QueryTimer;
}

void gasdataquery::on_btnStartDown_clicked()
{
    if(startState)
    {
        ui->calendarStartTim->hide();
        startState = false;
    }
    else
    {
        ui->calendarStartTim->show();
        ui->calendarEndTim->hide();
        startState = true;
        endState = false;
    }
}

void gasdataquery::on_btnEndDown_clicked()
{
    if(endState)
    {
        ui->calendarEndTim->hide();
        endState = false;
    }
    else
    {
        ui->calendarEndTim->show();
        ui->calendarStartTim->hide();
        endState = true;
        startState = false;
    }
}

void gasdataquery::on_butQuery_clicked()
{
    ui->calendarEndTim->hide();
    ui->calendarStartTim->hide();

    ui->butQuery->setEnabled(false);
    ui->butQuery->setText("查询中...");
    qsStartDisp = ui->lineStartTimDisp->text().trimmed();
    qsStartDisp = qsStartDisp.left(10);
    qStartTime = QDate::fromString(qsStartDisp,"yyyy-MM-dd");

    qsEndDisp = ui->lineEndTimDisp->text().trimmed();
    qsEndDisp = qsEndDisp.left(10);
    qEndTime = QDate::fromString(qsEndDisp,"yyyy-MM-dd");
    QueryTimer->start(100);
}

void gasdataquery::on_btnClose_clicked()
{
    this->close();
}

void gasdataquery::on_calendarStartTim_clicked(const QDate &date)
{
    ui->lineStartTimDisp->setText(date.toString("yyyy-MM-dd 00"));
    ui->calendarStartTim->hide();
    startState = false;
}

void gasdataquery::on_calendarEndTim_clicked(const QDate &date)
{
    ui->lineEndTimDisp->setText(date.toString("yyyy-MM-dd 23"));
    ui->calendarEndTim->hide();
    endState = false;
}
void gasdataquery::ResultDataQuery()
{
    char czStartName[MAX_SIZE];
    char czEndName[MAX_SIZE];
    char czStartDisp[MAX_SIZE];
    char czEndDisp[MAX_SIZE];
    char czDBFile[MAX_SIZE];
    int nRowCount = 0;
    char czTmp[MAX_SIZE];
    //获取仪器参数列表
    qYQIDList.clear();
    QStringList qslColHea;
    qslColHea.clear();


    QStringList qYQIDList;
    qYQIDList.append("ZA0");
    qYQIDList.append("ZB2");
    qYQIDList.append("ZB4");

    memset(czTmp,0,MAX_SIZE);
    GetAfxConfig()->GetIni("GasSetting","ChromaUnit",czTmp);

    if(atoi(czTmp))
    {
        qslColHea.insert(1,"一氧化氮(mg/m3)");
        qslColHea.insert(2,"二氧化硫(mg/m3)");
    }
    else
    {
        qslColHea.insert(1,"一氧化氮(ppm)");
        qslColHea.insert(2,"二氧化硫(ppm)");
    }
    qslColHea.insert(0,"时间");
    qslColHea.insert(3,"氧含量(%)");

    ui->tabwidData->clear();
    //ui->tabwidData->setSelectionBehavior(QAbstractItemView::SelectRows);//整行选中的方式
    ui->tabwidData->setEditTriggers(QAbstractItemView::NoEditTriggers);//设置不可编辑
    ui->tabwidData->setColumnCount(3+1);
    ui->tabwidData->setRowCount(0);
    ui->tabwidData->setHorizontalHeaderLabels(qslColHea);
    ui->tabwidData->horizontalHeader()->setResizeMode(QHeaderView::Stretch);

    for(int i=0;i<30;i++)
    {
        memset(czStartName,0,MAX_SIZE);
        memset(czEndName,0,MAX_SIZE);
        memset(czStartDisp,0,MAX_SIZE);
        memset(czEndDisp,0,MAX_SIZE);
        sprintf(czStartName,"%04d%02d%02d.db",qStartTime.year(),qStartTime.month(),qStartTime.day());
        sprintf(czEndName,"%04d%02d%02d.db",qEndTime.year(),qEndTime.month(),qEndTime.day());

        memset(czDBFile,0,MAX_SIZE);
        sprintf(czDBFile,"%s/%d/data/%s",DB_ROOT_PATH,GetAfxYQType(),czEndName);
        QString qsFile = QString(czDBFile);
        QFile file(qsFile);
        if(file.exists())
        {
            CDBBusiness* db = new CDBBusiness("2/data",czEndName);
            bool isResult = false;
            sqlite_data datalist;

            qsStartDisp = qEndTime.toString("yyyy-MM-dd");
            strcpy(czStartDisp,qsStartDisp.toLatin1().data());
            strcat(czStartDisp," 00:00:00");

            strcpy(czEndDisp,qsStartDisp.toLatin1().data());
            strcat(czEndDisp," 23:59:59");
            //将qYQIDList传进去，查出的就是相应参数的值
            isResult = db->Get8051((const char*)czStartDisp,(const char*)czEndDisp,&qYQIDList,datalist);
            if(isResult)
            {
                if(!datalist.IsEmpty())
                {
                    qYQIDList.insert(0,"-1");
                    ui->tabwidData->horizontalHeader()->setStretchLastSection(true);//尾不留空白
                    ui->tabwidData->rowHeight(8);

                    for(int j=1;j<=datalist.RowCount();j++)
                    {
                         bool isFlag = false;
                         for(int i = 0;i<qYQIDList.size();i++)
                         {
                             QString sValue;
                             if(i+2 <= datalist.ColCount())
                             {
                                 sValue = datalist.GetData(j,i+2);
                                 if(sValue.indexOf("&") >= 0)
                                 {
                                     QStringList qsAly = sValue.split("&");
                                     if(qsAly.length() > 1)
                                     {
                                         //当不查询标识数据且标识为空
                                         if((!ui->CheckDataID->isChecked()) && (qsAly.at(1).trimmed() != ""))
                                         {
                                             isFlag = true;
                                             i = qYQIDList.size();
                                             continue;
                                         }
                                     }
                                 }
                             }
                             if(i == 0)
                             {
                                 char cTime[20];memset(cTime,0,20);
                                 strcpy(cTime,datalist.GetData(j,i+1));
                                 QString qsTime(cTime);
                                 QTableWidgetItem *ItemTime = new QTableWidgetItem(qsTime);
                                 ItemTime->setTextAlignment(Qt::AlignHCenter);
                                 ui->labelTatolNum->setText(QString::number(nRowCount));
                                 ui->tabwidData->setRowCount(nRowCount);
                                 ui->tabwidData->setItem(nRowCount-1,i,ItemTime);
                             }
                             else
                             {
                                 QString qsValue = QString(datalist.GetData(j,i+1));
                                 if(qsValue.isEmpty())
                                 {
                                     continue;
                                 }
                                 QStringList qlValue = qsValue.split("&");

                                 if(!qlValue.at(1).isEmpty()&&!ui->CheckDataID->isChecked())
                                 {
                                    continue;
                                 }
                                 char cValue[64];memset(cValue,0,64);
                                 sprintf(cValue,"%.4f",qlValue.at(0).toDouble());
                                 strcat(cValue," ");
                                 strcat(cValue,qlValue.at(1).toLatin1().data());
                                 QTableWidgetItem *ItemValue = new QTableWidgetItem((QString)cValue);
                                 ItemValue->setTextAlignment(Qt::AlignHCenter);//设置显示内容居中

                                 ui->tabwidData->setItem(nRowCount-1,i,ItemValue);

                                 QString qsFlag = qlValue.at(1);
                                 if(qsFlag.length() > 0)
                                 {
                                     if(qsFlag.indexOf("E") >= 0)
                                     {
                                         //红色
                                         if(ui->tabwidData->item(nRowCount-1,i))
                                         {
                                            ui->tabwidData->item(nRowCount-1,i)->setTextColor(QColor(255,0,0));
                                         }
                                     }
                                     else if((qsFlag.indexOf("M") >= 0)||(qsFlag.indexOf("C") >= 0))
                                     {
                                         //蓝色
                                         if(ui->tabwidData->item(nRowCount-1,i))
                                         {
                                            ui->tabwidData->item(nRowCount-1,i)->setTextColor(QColor(85,0,255));
                                         }
                                     }
                                 }
                             }
                         }

                         if(!isFlag)
                         {
                             nRowCount++;
                         }
                    }
                    qYQIDList.removeFirst();
                    datalist.Free();
                }
                delete db;
            }
        }
        qEndTime = qEndTime.addDays(-1);
        if(!strcmp(czStartName,czEndName))
        {
            break;
        }
   }

}
//点击列头
void gasdataquery::onHeaderClicked(int nColumn)
{

    int nRow = ui->tabwidData->rowCount();
    QVector<double> vtX,vtY;
    QString qsContent;

    QTableWidgetItem *columnHeader = ui->tabwidData->horizontalHeaderItem(nColumn);
    if(columnHeader != NULL)
    {
        QString qsHearName = columnHeader->text().trimmed();
        for(int j=0;j<nRow;j++)
        {
           QTableWidgetItem *item = ui->tabwidData->item(nRow-j-1,nColumn);
            if(item != NULL)
            {
                qsContent = item->text();
                vtY.push_back(qsContent.toDouble());
                vtX.push_back(j);
            }
        }

        dldispdatacurve* clmonitcurve = new dldispdatacurve(m_pMC,1,qsHearName,vtX,vtY);
        clmonitcurve->move((qApp->desktop()->width() - clmonitcurve->width())/2,(qApp->desktop()->height() - clmonitcurve->height() + 60)/2);
        clmonitcurve->exec();
        delete  clmonitcurve;
        clmonitcurve = NULL;
    }
}

//void gasdataquery::on_left_clicked()
//{
//    int size = 4;
//    int nCurColumn = ui->tabwidData->horizontalScrollBar()->value();

//    if (nCurColumn > 0)
//    {
//        ui->tabwidData->horizontalScrollBar()->setSliderPosition(nCurColumn - size);
//    }
//    else
//    {
//        ui->tabwidData->horizontalScrollBar()->setSliderPosition(ui->tabwidData->columnCount());
//    }
//}

//void gasdataquery::on_right_clicked()
//{
//    int size = 4;
//    int nCurColumn = ui->tabwidData->horizontalScrollBar()->value();

//    if (nCurColumn <  ui->tabwidData->columnCount())
//    {
//        ui->tabwidData->horizontalScrollBar()->setSliderPosition(nCurColumn + size);
//    }
//    else
//    {
//        ui->tabwidData->horizontalScrollBar()->setSliderPosition(0);
//    }
//}

void gasdataquery::on_up_clicked()
{
    int size = 10;
    int nCurRow = ui->tabwidData->verticalScrollBar()->value();
    qDebug("UP current row:%d",nCurRow);

    if (nCurRow > 0)
    {
        ui->tabwidData->verticalScrollBar()->setSliderPosition(nCurRow - size);
    }
    else
    {
        ui->tabwidData->verticalScrollBar()->setSliderPosition(ui->tabwidData->rowCount());
    }
}

void gasdataquery::on_down_clicked()
{
    int size = 12;
    int nCurRow = ui->tabwidData->verticalScrollBar()->value();

    if (nCurRow+10 < ui->tabwidData->rowCount())
    {
        ui->tabwidData->verticalScrollBar()->setSliderPosition(nCurRow + size);
    }
    else
    {
        ui->tabwidData->verticalScrollBar()->setSliderPosition(0);
    }
}

void gasdataquery::on_butExport_clicked()
{
    QFile mmc("/dev/mmcblk0p1");
    QFile mmu("/dev/sda1");
    char czPath[MAX_SIZE];
    char czCopy[MAX_SIZE];
    char czYQType[MAX_SIZE];

    memset(czYQType,0,MAX_SIZE);
    memset(czCopy,0,MAX_SIZE);
    sprintf(czYQType,"/%d/data/",GetAfxYQType());
    strcpy(czCopy,DB_ROOT_PATH);
    strcat(czCopy,czYQType);

    if(mmu.exists())
    {
        ui->labelMovie->show();
        ui->labelWord->setText("数据导出中");
        ui->labelWord->show();

        usleep(200000);
        memset(czPath,0,MAX_SIZE);
        memcpy(czPath,"/mnt",strlen("/mnt"));
        strcat(czPath,"/u/");

        ResultDataExport(czPath);
        Timer->start(10000);//10S后启动定时器
     }
     else if(mmc.exists())
     {
        ui->labelMovie->show();
        ui->labelWord->setText("数据导出中");
        ui->labelWord->show();

        usleep(200000);
        memset(czPath,0,MAX_SIZE);
        memcpy(czPath,"/mnt",strlen("/mnt"));
        strcat(czPath,"/sd-card/");

        ResultDataExport(czPath);

        Timer->start(10000);//10S后启动定时器
     }
    else
    {
        dlgRemindMessage *pMessage = new dlgRemindMessage(m_pMC,4);
        pMessage->exec();
        delete pMessage;
        pMessage = NULL;
    }
}
//将查询出来的数据导出
void gasdataquery::ResultDataExport(const char* czPath)
{
    int nColumn = ui->tabwidData->columnCount();
    int nRow = ui->tabwidData->rowCount();
    QString qsContent;

    QString qsTxtFilePath = QString(czPath) + "ResultData.xls";
    QFile file(qsTxtFilePath);
    QTextStream stream(&file);
    file.open(QIODevice::WriteOnly | QIODevice::Text);
    for(int k=0;k<nColumn;k++)
    {

        if(ui->tabwidData->horizontalHeaderItem(k))
        {
            qsContent = ui->tabwidData->horizontalHeaderItem(k)->text();
        }
        stream <<qsContent;
        stream<<"\t";
    }
    stream << "\r\n";
    for(int i=0;i<nRow;i++)
    {
        for(int j=0;j<nColumn;j++)
        {
           QTableWidgetItem *item = ui->tabwidData->item(i,j);
            if(item != NULL)
            {
                QString qsContent = item->text();
                stream <<qsContent;
                stream<<"\t";
            }
        }
        stream << "\r\n";
    }
    file.close();

}
//10S后隐藏数据导出中字样
void gasdataquery::OnHideWordMovie()
{
    Timer->stop();
    ui->labelMovie->hide();
    ui->labelWord->hide();   
    sync();//同步
    QMessageBox::information(NULL, "提示信息","数据导出成功！");
}
void gasdataquery::OnQueryData()
{
    QueryTimer->stop();
    ResultDataQuery();
    ui->butQuery->setEnabled(true);
    ui->butQuery->setText("查询");
}
