#include "bsallmodeltest.h"
#include "ui_bsallmodeltest.h"
#include "dlgremindmessage.h"
#include <QTextCodec>
#include <QMouseEvent>


bsAllModelTest::bsAllModelTest(CMainCtrl* pMC,QWidget *parent) :
    QDialog(parent),
    ui(new Ui::bsAllModelTest),
    obj1(NULL),
    obj2(NULL),
    obj3(NULL),
    obj4(NULL),
    obj5(NULL),
    obj6(NULL),
    obj7(NULL),
    obj8(NULL),
    obj9(NULL),
    obj10(NULL),
    obj11(NULL),
    obj12(NULL),
    obj13(NULL),
    obj14(NULL),
    obj15(NULL),
    obj16(NULL),
    dlgmaintain(NULL),
    dlgscencemaintain(NULL),
    dlgmaintain_voc(NULL),
    m_bQbFlag(true),
    m_bJbFlag(true)
{
    ui->setupUi(this);
    m_pMC = pMC;
    this->setWindowFlags(Qt::FramelessWindowHint);
    QTextCodec *codec = QTextCodec::codecForName("UTF-8");
    QTextCodec::setCodecForLocale(codec);
    QTextCodec::setCodecForCStrings(codec);
    QTextCodec::setCodecForTr(codec);
    m_nYQType = GetAfxYQType();
    QRect rect(120, 5, 520, 430);
    if(1 == m_nYQType)
    {
        dlgmaintain = new dlgmaintainmap(m_pMC,this);
        dlgmaintain->setGeometry(rect);
        dlgmaintain->show();
    }
    else if(2 == m_nYQType)
    {
        obj14= new dlgmodeltest14(m_pMC,this);
        obj14->setGeometry(rect);
        obj14->show();
    }
    else if(5 == m_nYQType)
    {
        dlgscencemaintain = new dlgfluorescencemaintain(m_pMC,this);
        dlgscencemaintain->setGeometry(rect);
        dlgscencemaintain->show();
    }
    else if(3 == m_nYQType)//有机物主控界面
    {
        ui->stackedWidget->hide();
//        dlgmaintain_voc = new dlgmaintainmap_voc(m_pMC,this);
//        dlgmaintain_voc->setGeometry(rect);
//        dlgmaintain_voc->show();
    }

    int ipYQCou = m_pMC->pYQs->GetYQCount();
    if(ipYQCou == 0)
    {
        PlsSelectMdl(QString::fromUtf8("请先设置参数属性保存后再启动该程序！"));
        return;
    }
    //获取仪器
    for(int i = 0;i < YQMAXCOUNT;i++)
    {
        if(m_pMC->pYQs->pYQ[i])
        {
            pYQ = m_pMC->pYQs->pYQ[i];
            break;
        }
    }

    for(int j = 0;j < 20;j++)
    {
        m_bOnOff[j] = true;
    }
    this->ModAddInit();
    this->ModAddNameInit();
    this->ModelIniSet.clear();

    char czGroup[64];memset(czGroup,0,64);
    char czItem[64];
    char czValue[64];
    strcpy(czGroup,"Model_SET");

    ui->listWidget->clear();
    listItem = new QListWidgetItem("主控台");
    listItem->setSizeHint(QSize(100,30));
    ui->listWidget->addItem(listItem);

    for(int i=1;i <= 20;i++)
    {
        memset(czItem,0,64);
        memset(czValue,0,64);
        sprintf(czItem,"Mod_%d",i);
        GetAfxConfig()->GetIni(czGroup,czItem,czValue);

        if(strlen(czValue) > 0)
        {
            QString sAddName = this->GetModelName(i);
            listItem = new QListWidgetItem(sAddName);
            listItem->setSizeHint(QSize(100,30));
            ui->listWidget->addItem(listItem);
            ModelIniSet.insert(sAddName,atoi(czValue));
        }
    }

    ui->cbxAddName->setVisible(false);
    ui->cbxAdd->setVisible(false);
    ui->lblAddress->setVisible(false);
    ui->btnModAdd->setVisible(false);
    ui->btnModDel->setVisible(false);
    m_nClick = 0;
    ui->listWidget->setCurrentRow(0);
}

bsAllModelTest::~bsAllModelTest()
{
    if(obj1 != NULL)
    {
        delete obj1;
    }
    if(obj2 != NULL)
    {
        delete obj2;
    }
    if(obj3 != NULL)
    {
        delete obj3;
    }
    if(obj4 != NULL)
    {
        delete obj4;
    }
    if(obj5 != NULL)
    {
        delete obj5;
    }
    if(obj6 != NULL)
    {
        delete obj6;
    }
    if(obj7 != NULL)
    {
        delete obj7;
    }
    if(obj8 != NULL)
    {
        delete obj8;
    }
    if(obj9 != NULL)
    {
        delete obj9;
    }
    if(obj10 != NULL)
    {
        delete obj10;
    }
    if(obj11 != NULL)
    {
        delete obj11;
    }
    if(obj12 != NULL)
    {
        delete obj12;
    }
    if(obj13 != NULL)
    {
        delete obj13;
    }
    if(obj14 != NULL)
    {
        delete obj14;
    }
    if(obj15 != NULL)
    {
        delete obj15;
    }
    if(obj16 != NULL)
    {
        delete obj16;
    }
    if(dlgmaintain != NULL)
    {
        delete dlgmaintain;
    }
    if(dlgmaintain_voc != NULL)
    {
        delete dlgmaintain_voc;
    }
    delete listItem;
    delete ui;
}

void bsAllModelTest::mousePressEvent(QMouseEvent * mouseEvent)
{
    int x = mouseEvent->pos().x();
    int y = mouseEvent->pos().y();


    if ((x < 50)&&(y > 120))
    {
        m_nClick++;
        if(m_nClick > 4)
        {
            m_nClick = 0;
            ui->cbxAddName->setVisible(true);
            ui->cbxAdd->setVisible(true);
            ui->lblAddress->setVisible(true);
            ui->btnModAdd->setVisible(true);
            ui->btnModDel->setVisible(true);
        }
    }
}

bool bsAllModelTest::GetModelVersionWorkInfo()
{
    bool bRet = false;
    if(ui->listWidget->currentRow() > 0)
    {
        QString sAddName = ui->listWidget->currentItem()->text().trimmed();
        int iModAdd;
        if(ModelIniSet.contains(sAddName))
        {
            QMap<QString,int>::iterator it = ModelIniSet.find(sAddName);
            iModAdd = it.value();
        }

        if(sAddName == "有机物协调")
        {
            ui->txtModInfo->setText("");
            unsigned char bBuff[MAX_SIZE];
            memset(bBuff,0,MAX_SIZE);
            if(pYQ->m_pProcess->pDriver1)
            {
                if(pYQ->m_pProcess->pDriver1->ReadModbus(iModAdd,40047,6,bBuff))
                {
                    char str[16];
                    char czVersion[64];
                    memset(czVersion,0,64);

                    for(int i=0;i<6;i++)
                    {
                        memset(str,0,16);
                        sprintf(str,"%02x",bBuff[i]);
                        strcat(czVersion,str);
                    }

                    //int iWorkFlag = MAKEWORD(bBuff[11],bBuff[10]);
                    ui->txtModInfo->setText("版本：" + (QString)czVersion);
                    bRet = true;
                }
            }
        }
        else if(iModAdd != 0 && sAddName != "主控台" && sAddName.length() > 0)
        {
            ui->txtModInfo->setText("");
            unsigned char bBuff[MAX_SIZE];
            memset(bBuff,0,MAX_SIZE);
            if(pYQ->m_pProcess->pDriver->ReadModbus(iModAdd,40047,6,bBuff))
            {
                char str[16];
                char czVersion[64];
                memset(czVersion,0,64);

                for(int i=0;i<6;i++)
                {
                    memset(str,0,16);
                    sprintf(str,"%02x",bBuff[i]);
                    strcat(czVersion,str);
                }

                //int iWorkFlag = MAKEWORD(bBuff[11],bBuff[10]);
                ui->txtModInfo->setText("版本：" + (QString)czVersion);
                bRet = true;
            }
        }
    }
    return bRet;
}

//继电器控制（10），温度控制（21），联动模块（42）
int bsAllModelTest::singleCtrlAddrs[4] = {NULL,10, 21, 42};

QString bsAllModelTest::GetModelName(int iAddress)
{
    QString sAddName;
    switch(iAddress)
    {
        case 1:
        sAddName = "继电器控制";
            break;
        case 2:
        sAddName = "温度控制";
            break;
        case 3:
        sAddName = "联动";
            break;
        case 4:
        sAddName = "总汞前置";
            break;
        case 5:
        sAddName = "电化学检测";
            break;
        case 6:
        sAddName = "比色法检测";
            break;
        case 8:
        sAddName = "有机物信号";
            break;
        case 9:
        sAddName = "有机物协调";
            break;
        case 10:
        sAddName = "有机物温度";
            break;
        case 11:
        sAddName = "泵与电机驱动";
            break;
        case 12:
        sAddName = "汞信号检测";
            break;
        case 13:
        sAddName = "气泵驱动";
            break;
        case 14:
        sAddName = "紫外烟气主控制";
            break;
        case 15:
        sAddName = "ECD检测";
            break;
        case 16:
        sAddName = "原子荧光控制";
            break;
        case 17:
        sAddName = "船载数采仪采集";
            break;
    }
    return sAddName;
}

int bsAllModelTest::GetModelIde(QString sModName)
{
   int iModIde = 0;
   if(sModName == "继电器控制")
       iModIde = 1;
   else if(sModName == "温度控制")
       iModIde = 2;
   else if(sModName == "联动")
       iModIde = 3;
   else if(sModName == "总汞前置")
       iModIde = 4;
   else if(sModName == "电化学检测")
       iModIde = 5;
   else if(sModName == "比色法检测")
       iModIde = 6;
   else if(sModName == "有机物信号")
       iModIde = 8;
   else if(sModName == "有机物协调")
       iModIde = 9;
   else if(sModName == "有机物温度")
       iModIde = 10;
   else if(sModName == "泵与电机驱动")
       iModIde = 11;
   else if(sModName == "汞信号检测")
       iModIde = 12;
   else if(sModName == "气泵驱动")
       iModIde = 13;
   else if(sModName == "紫外烟气主控制")
       iModIde = 14;
   else if(sModName == "ECD检测")
       iModIde = 15;
   else if(sModName == "原子荧光控制")
       iModIde = 16;
   else if(sModName == "船载数采仪采集")
       iModIde = 17;

   return iModIde;
}

void bsAllModelTest::ModAddInit()
{
    QString sText;
    QString sValue;
    ui->cbxAdd->clear();
    for(int i = 1;i < 20;i++)
    {
        sText.sprintf("%d",i);
        sValue.sprintf("%d",i);
        ui->cbxAdd->addItem(sText,sValue);
    }
}

void bsAllModelTest::ModAddNameInit()
{
    ui->cbxAddName->clear();
    QString sText;
    QString sValue;

    sText = "继电器控制";
    sValue = "1";
    ui->cbxAddName->addItem(sText,sValue);

    sText = "温度控制";
    sValue = "2";
    ui->cbxAddName->addItem(sText,sValue);

    sText = "联动";
    sValue = "3";
    ui->cbxAddName->addItem(sText,sValue);

    sText = "总汞前置";
    sValue = "4";
    ui->cbxAddName->addItem(sText,sValue);

    sText = "电化学检测";
    sValue = "5";
    ui->cbxAddName->addItem(sText,sValue);

    sText = "比色法检测";
    sValue = "6";
    ui->cbxAddName->addItem(sText,sValue);

    //sText = "预留";
    //sValue = "7";
    //ui->cbxAddName->addItem(sText,sValue);

    sText = "有机物信号";
    sValue = "8";
    ui->cbxAddName->addItem(sText,sValue);

    sText = "有机物协调";
    sValue = "9";
    ui->cbxAddName->addItem(sText,sValue);

    sText = "有机物温度";
    sValue = "10";
    ui->cbxAddName->addItem(sText,sValue);

    sText = "泵与电机驱动";
    sValue = "11";
    ui->cbxAddName->addItem(sText,sValue);

    sText = "汞信号检测";
    sValue = "12";
    ui->cbxAddName->addItem(sText,sValue);

    sText = "气泵驱动";
    sValue = "13";
    ui->cbxAddName->addItem(sText,sValue);

    sText = "紫外烟气主控制";
    sValue = "14";
    ui->cbxAddName->addItem(sText,sValue);

    sText = "ECD检测";
    sValue = "15";
    ui->cbxAddName->addItem(sText,sValue);

    sText = "原子荧光控制";
    sValue = "16";
    ui->cbxAddName->addItem(sText,sValue);

    sText = "船载数采仪采集";
    sValue = "17";
    ui->cbxAddName->addItem(sText,sValue);
}

//判断仪器是否正确连接
//返回:
//  --> false 失败
//  --> true  成功
bool bsAllModelTest::judgeYQConnect()
{
    //获取仪器
    for(int i = 0;i < YQMAXCOUNT;i++)
    {
        if(m_pMC->pYQs->pYQ[i])
        {
            pYQ = m_pMC->pYQs->pYQ[i];
            break;
        }
    }
    if(NULL == pYQ)
    {
        PlsSelectMdl(QString::fromUtf8("仪器信息获取失败!"));
        return false;
    }
    else
    {
        return true;
    }
}

void bsAllModelTest::DealWithBroadcast()
{
    if(false == judgeYQConnect()) return;
    int nAddress = 0;
    int nName = 0;

    QStringList qsList;
    QString qsModName;
    ui->pag4_Z06->show();

    ui->listWidget->clear();

    listItem = new QListWidgetItem("主控台");
    ui->listWidget->addItem(listItem);
   // mapModelAddress.insert(10000,"主控台");

    unsigned char bBuff[MAX_SIZE];
    memset(bBuff,0,MAX_SIZE); 
    int nModelNum = 0;
    if(3 == m_nYQType)//有机物主控界面,协调模块扫描
    {
        if(pYQ->m_pProcess->pDriver1)
        {
            if(pYQ->m_pProcess->pDriver1->ModuleScanning(bBuff))
            {
                nAddress = bBuff[4];
                nName = bBuff[6];
                m_moduleAddrs[nModelNum++] = nAddress;
                qsList.append("有机物协调");
                ///mapModelAddress.insert(nName,"有机物协调");
            }
        }
    }
    memset(bBuff,0,MAX_SIZE);
    //发送广播
    if(pYQ->m_pProcess->pDriver->ModuleScanning(bBuff))
    {
        for (int i = 0;i < NUM_MODULE; i++)
        {
            qsModName.clear();
            nAddress = bBuff[i*9+4];
            nName = bBuff[i*9+6];
            m_moduleAddrs[i+nModelNum] = nAddress ;
            switch(nName)
            {
            case 1:
                qsModName = "继电器控制";
                break;
            case 2:
                qsModName = "温度控制";
                break;
            case 3:
                qsModName = "联动";
                break;
            case 4:
                qsModName = "总汞前置";
                break;
            case 5:
                qsModName = "电化学检测";
                break;
            case 6:
                qsModName = "比色法检测";
                break;

            case 8:
                qsModName = "有机物信号";
                break;
            case 9:
                qsModName = "有机物协调";
                break;
            case 10:
                qsModName = "有机物温度";
                break;
            case 11:
                qsModName = "泵与电机驱动";
                break;
            case 12:
                qsModName = "汞信号检测";
                break;
            case 13:
                qsModName = "气泵驱动";
                break;
            case 14:
                qsModName = "紫外烟气主控制";
                break;
            case 15:
                qsModName = "ECD检测";
                break;
            case 16:
                qsModName = "原子荧光控制";
                break;
            case 17:
                qsModName = "船载数采仪采集";
                break;
            }
            qsList.append(qsModName);
        }

        int nCount = qsList.size();
        for(int i = 0; i < nCount; i++)
        {
            QString qsName = static_cast<QString>(qsList.at(i));
            listItem = new QListWidgetItem(qsName);
            ui->listWidget->addItem(listItem);
        }

        ui->listWidget->setCurrentRow(0);
    }
    else
    {
        PlsSelectMdl(QString::fromUtf8("模块扫描失败!"));
        return;
    }
}

bool bsAllModelTest::dealSendCtrlCmd(int nDCF)
{
    if(false == judgeYQConnect()) return false;
    if(pYQ->m_pProcess->pDriver->SendControlCmd(3,42, nDCF, m_bOnOff[nDCF]))
    {
        m_bOnOff[nDCF] = (!m_bOnOff[nDCF]);
        return true;
    }
    else
    {
        PlsSelectMdl(QString::fromUtf8("通讯故障，请检查!"));
        return false;
    }
}

//警告信息窗口
void bsAllModelTest::PlsSelectMdl(QString context)
{
    QMessageBox::information(NULL, "提示信息",context,QMessageBox::Ok);
}

void bsAllModelTest::on_btnDCF4_clicked()
{
    if(dealSendCtrlCmd(4))
    {
        if(!m_bOnOff[4])
        {
            ui->btnDCF4->setIcon(QIcon(":/res/green.png"));
        }
        else
        {
            ui->btnDCF4->setIcon(QIcon(":/res/red.png"));
        }
    }
}

void bsAllModelTest::on_btnDCF5_clicked()
{
    if(dealSendCtrlCmd(5))
    {
        if(!m_bOnOff[5])
        {
            ui->btnDCF5->setIcon(QIcon(":/res/green.png"));
        }
        else
        {
            ui->btnDCF5->setIcon(QIcon(":/res/red.png"));
        }
    }
}

void bsAllModelTest::on_btnDCF6_clicked()
{
    if(dealSendCtrlCmd(6))
    {
        if(!m_bOnOff[6])
        {
            ui->btnDCF6->setIcon(QIcon(":/res/green.png"));
        }
        else
        {
            ui->btnDCF6->setIcon(QIcon(":/res/red.png"));
        }
    }
}

void bsAllModelTest::on_btnDCF7_clicked()
{
    if(dealSendCtrlCmd(7))
    {
        if(!m_bOnOff[7])
        {
            ui->btnDCF7->setIcon(QIcon(":/res/green.png"));
        }
        else
        {
            ui->btnDCF7->setIcon(QIcon(":/res/red.png"));
        }
    }
}

void bsAllModelTest::on_btnDCF3_clicked()
{
    if(dealSendCtrlCmd(3))
    {
        if(!m_bOnOff[3])
        {
            ui->btnDCF3->setIcon(QIcon(":/res/green.png"));
        }
        else
        {
            ui->btnDCF3->setIcon(QIcon(":/res/red.png"));
        }
    }
}

void bsAllModelTest::on_btnDCF1_clicked()
{
    if(dealSendCtrlCmd(1))
    {
        if(!m_bOnOff[1])
        {
            ui->btnDCF1->setIcon(QIcon(":/res/bsDcf1_2.png"));
        }
        else
        {
            ui->btnDCF1->setIcon(QIcon(":/res/bsDcf1_3.png"));
        }
    }
}

void bsAllModelTest::on_btnDCF2_clicked()
{
    if(dealSendCtrlCmd(2))
    {
        if(!m_bOnOff[2])
        {
            ui->btnDCF2->setIcon(QIcon(":/res/bsDcf2_2.png"));
        }
        else
        {
            ui->btnDCF2->setIcon(QIcon(":/res/bsDcf2_3.png"));
        }
    }
}

void bsAllModelTest::on_btnDCF15_clicked()
{
    if(dealSendCtrlCmd(15))
    {
        if(!m_bOnOff[15])
        {
            ui->btnDCF15->setIcon(QIcon(":/res/bsDcf4_2.png"));
        }
        else
        {
            ui->btnDCF15->setIcon(QIcon(":/res/bsDcf4_3.png"));
        }
    }
}

void bsAllModelTest::on_btnDCF13_clicked()
{
    if(dealSendCtrlCmd(13))
    {
        if(!m_bOnOff[13])
        {
            ui->btnDCF13->setIcon(QIcon(":/res/bsDcf4_2.png"));
        }
        else
        {
            ui->btnDCF13->setIcon(QIcon(":/res/bsDcf4_3.png"));
        }
    }
}

void bsAllModelTest::on_listWidget_clicked(const QModelIndex &index)
{
    m_sModName = index.data().toString();
    ui->txtModInfo->setText("");
    if(dlgmaintain!=NULL)
    {
        dlgmaintain->hide();
    }
    if(obj1 != NULL)
    {
        obj1->hide();
    }
    if(obj2 != NULL)
    {
        if(obj2->m_bRunThread)
            obj2->m_bRunThread = false;
        obj2->hide();
    }
    if(obj3 != NULL)
    {
        obj3->hide();
    }
    if(obj4 != NULL)
    {
        obj4->hide();
    }
    if(obj5 != NULL)
    {
        obj5->hide();
    }
    if(obj6 != NULL)
    {
        //if(obj6->m_bRunThread)
          //  obj6->m_bRunThread = false;
        obj6->hide();
    }
    if(obj7 != NULL)
    {
        obj7->hide();
    }
    if(obj8 != NULL)
    {
        obj8->hide();
    }
    if(obj9 != NULL)
    {
        obj9->hide();
    }
    if(obj10 != NULL)
    {
        obj10->hide();
    }
    if(obj11 != NULL)
    {
        obj11->hide();
    }
    if(obj12 != NULL)
    {
        if(obj12->m_bRunThread)
            obj12->m_bRunThread = false;
        obj12->hide();
    }
    if(obj13 != NULL)
    {
        obj13->hide();
    }
    if(obj14 != NULL)
    {
        obj14->hide();
    }
    if(obj15 != NULL)
    {
        obj15->hide();
    }
    if(obj16 != NULL)
    {
        obj16->hide();
    }

    if(ModelIniSet.count() > 0)
    {
        int nYQType = GetAfxYQType();
        QRect rect(120, 5, 520, 430);

        if(m_sModName == "主控台")//
        {
            if(1 == nYQType)
            {
                dlgmaintain->setGeometry(rect);
                dlgmaintain->show();
            }
            else if(2 == nYQType)
            {
                obj14->setGeometry(rect);
                obj14->show();
            }
            else if(5 == nYQType)
            {
                dlgscencemaintain->setGeometry(rect);
                dlgscencemaintain->show();
            }
            else if(3 == nYQType)
            {
//                dlgmaintain_voc->setGeometry(rect);
//                dlgmaintain_voc->show();
            }
        }
        else if(m_sModName == "继电器控制")//1
        {
            if(obj1 == NULL)
            {
                obj1 = new dlgmodeltest1(m_pMC,this);
            }
            obj1->setGeometry(rect);
            obj1->show();
        }
        else if(m_sModName == "温度控制")//2
        {
            if(obj2 == NULL)
            {
                obj2 = new dlgmodeltest2(m_pMC,this);
            }
            obj2->setGeometry(rect);
            obj2->show();
        }
        else if(m_sModName == "联动")//3
        {
            if(obj3 == NULL)
            {
                obj3 = new dlgmodeltest3(m_pMC,this);
            }
            obj3->setGeometry(rect);
            obj3->show();
        }
        else if(m_sModName == "总汞前置")//4
        {
            //ui->pag_Mod4->show();
        }
       else if(m_sModName == "电化学检测")//5
        {
            if(obj5 == NULL)
            {
                obj5 = new dlgmodeltest5(m_pMC,this);
            }
            obj5->setGeometry(rect);
            obj5->show();
        }
        else if(m_sModName == "比色法检测")//6
        {
            if(obj6 == NULL)
            {
                obj6 = new dlgmodeltest6(m_pMC,this);
            }
            obj6->setGeometry(rect);
            obj6->show();
        }
        else if(m_sModName == "预留7")
        {
          //  ui->pag_Mod7->show();
        }
        else if(m_sModName == "有机物信号")//8
        {
           // ui->pag_Mod8->show();
        }
        else if(m_sModName == "有机物协调")//9
        {
            if(obj9 == NULL)
            {
                obj9 = new dlgmodeltest9(m_pMC,this);
            }
            obj9->setGeometry(rect);
            obj9->show();
        }
        else if(m_sModName == "有机物温度")//10
        {
          //  ui->pag_Mod10->show();
        }
        else if(m_sModName == "泵与电机驱动")//11
        {
            if(obj11 == NULL)
            {
                obj11 = new dlgmodeltest11(m_pMC,this);
            }
            obj11->setGeometry(rect);
            obj11->show();
        }
        else if(m_sModName == "汞信号检测")//12
        {
            if(obj12 == NULL)
            {
                connect(obj12, SIGNAL(close()), this, SLOT(test12()),Qt::QueuedConnection);
                obj12 = new dlgmodeltest12(m_pMC,this);
            }
            obj12->setGeometry(rect);
            obj12->show();
        }
        else if(m_sModName == "气泵驱动")//13
        {

        }
        else if(m_sModName == "紫外烟气主控制")//14
        {
            if(obj14 == NULL)
            {
                obj14= new dlgmodeltest14(m_pMC,this);
            }
            obj14->setGeometry(rect);
            obj14->show();
        }
        else if(m_sModName == "ECD检测")//15
        {
        }
        else if(m_sModName == "原子荧光控制")//16
        {
            if(obj16 == NULL)
            {
                obj16 = new dlgmodeltest16(m_pMC,this);
            }
            obj16->setGeometry(rect);
            obj16->show();
        }
        else if(m_sModName == "船载数采仪采集")//17
        {
        }
    }
}

void bsAllModelTest::bsYWSendCmd(short int iYwType)
{
    int16_t wPrm1 = 0;//源电磁阀
    int nCount = 0;
    for(int i = 0;i<17;i++)
    {
        if(!m_bOnOff[i])
        {
            wPrm1 = i;
            nCount++;
        }
    }
    if((nCount>=2)||(0 == wPrm1))
    {
       dlgRemindMessage *pMessage = new dlgRemindMessage(m_pMC,3);
       pMessage->exec();
       delete pMessage;
       pMessage = NULL;
       return;
    }
    if(dealLevelCmd(wPrm1,iYwType))
    {
        if(1 == iYwType)
            ui->btnYW1->setIcon(QIcon(":/res/green.png"));
        else if(2 == iYwType)
            ui->btnYW2->setIcon(QIcon(":/res/green.png"));
        else if(3 == iYwType)
            ui->btnYW3->setIcon(QIcon(":/res/green.png"));
    }
    else
    {
        PlsSelectMdl(QString::fromUtf8("通讯故障，请检查!"));
    }
}

bool bsAllModelTest::dealLevelCmd(int16_t wPrm1,int16_t wPrm2)
{
    if(false == judgeYQConnect()) return false;
    unsigned char bBuff[MAX_SIZE];
    memset(bBuff,0,MAX_SIZE);
    //命令字
    int16_t wPrm0 = 40;//命令
    int16_t wPrm3 = 3;//废液阀
    int16_t wPrm4 = 1;//速度
    int16_t wPrm5 = 0;
    int16_t wPrm6 = 0;
    bBuff[0] = HIBYTE(wPrm0);
    bBuff[1] = LOBYTE(wPrm0);
    bBuff[2] = HIBYTE(wPrm1);
    bBuff[3] = LOBYTE(wPrm1);
    bBuff[4] = HIBYTE(wPrm2);
    bBuff[5] = LOBYTE(wPrm2);
    bBuff[6] = HIBYTE(wPrm3);
    bBuff[7] = LOBYTE(wPrm3);
    bBuff[8] = HIBYTE(wPrm4);
    bBuff[9] = LOBYTE(wPrm4);
    bBuff[10] = HIBYTE(wPrm5);
    bBuff[11] = LOBYTE(wPrm5);
    bBuff[12] = HIBYTE(wPrm6);
    bBuff[13] = LOBYTE(wPrm6);
    if(pYQ->m_pProcess->pDriver->WriteModbus(3,40001,6+1,bBuff))
        return true;
    else
        return false;
}

//液位1
void bsAllModelTest::on_btnYW1_clicked()
{
    this->bsYWSendCmd(1);
}
//液位2
void bsAllModelTest::on_btnYW2_clicked()
{
    this->bsYWSendCmd(2);
}
//液位3
void bsAllModelTest::on_btnYW3_clicked()
{
    this->bsYWSendCmd(3);
}

////手动扫描
//void bsAllModelTest::on_btnManualScan_clicked()
//{
//    DealWithBroadcast();
//}

//单个模块复位
void bsAllModelTest::on_btnResetMdlSingle_clicked()
{
    if(false == judgeYQConnect()) return;

    if(ModelIniSet.count() > 0 &&  ui->listWidget->currentItem())
    {
        QString sAddName = ui->listWidget->currentItem()->text().trimmed();
        int iModAdd;
        if(ModelIniSet.contains(sAddName))
        {
            QMap<QString,int>::iterator it = ModelIniSet.find(sAddName);
            iModAdd = it.value();
        }

        if(sAddName == "主控台")
        {
            return;
        }

        if(iModAdd == 0)
        {
            PlsSelectMdl(QString::fromUtf8("请选择模块或模块检查出现错误!"));
            return;
        }

        bool bTag = false;
        if(3 == m_nYQType && sAddName == "有机物协调")
        {
            if(pYQ->m_pProcess->pDriver1)
                bTag = pYQ->m_pProcess->pDriver1->SingleModuleReset(iModAdd);
        }
        else
        {
            bTag = pYQ->m_pProcess->pDriver->SingleModuleReset(iModAdd);
        }

        if(bTag)
        {
            PlsSelectMdl(QString::fromUtf8("模块复位成功!"));
        }
        else
        {
            PlsSelectMdl(QString::fromUtf8("模块复位失败!"));
        }
    }
    else
    {
        PlsSelectMdl(QString::fromUtf8("请先选择模块!"));
    }
}
//所有模块复位
void bsAllModelTest::on_btnResetMdlBroad_clicked()
{
    if(false == judgeYQConnect()) return;
    pYQ->m_pProcess->pDriver->AllModuleReset();
    if(3 == m_nYQType && m_sModName == "有机物协调")
    {
        if(pYQ->m_pProcess->pDriver1)
            pYQ->m_pProcess->pDriver1->AllModuleReset();
    }
}

void bsAllModelTest::on_btnClose_clicked()
{
    //紫外烟气退出界面需通知已退出模块维护，可以执行流程了
    if(2 == GetAfxYQType())
    {
        CYQ* pYQ = m_pMC->pYQs->GetYQ("ZA0");
        if(pYQ)
        {
            ((CProcess2*)(pYQ->m_pProcess))->SetStartMaintain(false);

        }
    }
    this->close();
}

//添加模块名称
void bsAllModelTest::on_btnModAdd_clicked()
{
    QString sText = ui->cbxAddName->currentText().trimmed();
    if(sText.length() > 0)
    {
        for(int i = 0;i<ui->listWidget->count();i++)
        {
            QString qsName = ui->listWidget->item(i)->text().trimmed();
            if(sText == qsName)
            {
                PlsSelectMdl(QString::fromUtf8("已添加该模块!"));
                return;
            }
        }

        listItem = new QListWidgetItem(sText);
        listItem->setSizeHint(QSize(100,30));
        ui->listWidget->addItem(listItem);
        QString sModAdd = ui->cbxAdd->itemData(ui->cbxAdd->currentIndex()).toString().trimmed();
        this->ModelIniSet.insert(sText,atoi(sModAdd.toLatin1().data()));

        this->InsIniModelInfo();
    }
}

void bsAllModelTest::InsIniModelInfo()
{
    GetAfxConfig()->DelIni("Model_SET");

    char czGroup[64];memset(czGroup,0,64);
    char czItem[64];
    char czValue[64];

    strcpy(czGroup,"Model_SET");

    if(this->ModelIniSet.count() > 0)
    {
        QMap<QString,int>::iterator it; //遍历map
        for ( it = ModelIniSet.begin(); it != ModelIniSet.end(); ++it ) {
            //qDebug( "%s: %s", it.key().ascii(), it.data().ascii()); //用key()和data()分别获取“键”和“值”
            QString sModName = it.key();
            int iModIde = this->GetModelIde(sModName);
            memset(czItem,0,64);
            memset(czValue,0,64);
            sprintf(czItem,"Mod_%d",iModIde);
            sprintf(czValue,"%d",it.value());
            GetAfxConfig()->SetIni(czGroup,czItem,czValue);
        }
    }
}

//删除模块名称
void bsAllModelTest::on_btnModDel_clicked()
{
    QString qsName = ui->listWidget->currentIndex().data().toString().trimmed();
    if(qsName.length() > 0 && qsName != "主控台")
    {
        int iRow = ui->listWidget->currentRow();//获取当前鼠标所选行
        ui->listWidget->takeItem(iRow);//删除该行
    }
    this->ModelIniSet.remove(qsName);
    this->InsIniModelInfo();
}

void bsAllModelTest::on_btnGetVerWorkInfo_clicked()
{
    if(!GetModelVersionWorkInfo())
    {
        QMessageBox::information(NULL, "提示信息","通讯故障.");
    }
}

void bsAllModelTest::on_cbxAddName_currentIndexChanged(int index)
{
    if(index >= 0)
    {
        QString sValue = ui->cbxAddName->itemData(ui->cbxAddName->currentIndex()).toString().trimmed();
        if(sValue.length() > 0)
        {
            ui->cbxAdd->setCurrentIndex(sValue.toInt() - 1);
        }
    }
}
//模块地址、波特率设置
void bsAllModelTest::on_btnSetModAdd_clicked()
{
    dlgmodeltest0 *dlgmod0 = new dlgmodeltest0(m_pMC);
    dlgmod0->move((qApp->desktop()->width() - dlgmod0->width())/2,(qApp->desktop()->height() - dlgmod0->height())/2);
    dlgmod0->exec();
    delete dlgmod0;
    dlgmod0 = NULL;
}
