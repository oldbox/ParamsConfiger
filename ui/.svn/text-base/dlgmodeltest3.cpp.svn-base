#include "dlgmodeltest3.h"
#include "ui_dlgmodeltest3.h"
#include <QMessageBox>
#include <QTextCodec>

dlgmodeltest3::dlgmodeltest3(CMainCtrl* pMC,QWidget *parent) :
    QWidget(parent),
    ui(new Ui::dlgmodeltest3)
{
    ui->setupUi(this);

    QTextCodec *codec = QTextCodec::codecForName("UTF-8");
    QTextCodec::setCodecForLocale(codec);
    QTextCodec::setCodecForCStrings(codec);
    QTextCodec::setCodecForTr(codec);

    m_pMC = pMC;
    m_nRow = -1;
    for(int k = 0;k < 16;k++)
    {
        m_nStatus[k] = 0;
    }
    //获取仪器
    for(int i = 0;i < YQMAXCOUNT;i++)
    {
        if(m_pMC->pYQs->pYQ[i])
        {
            pYQ = m_pMC->pYQs->pYQ[i];
            break;
        }
    }
}

dlgmodeltest3::~dlgmodeltest3()
{
    delete ui;
}

//警告信息窗口
void dlgmodeltest3::PlsSelectMdl(QString context)
{
    QMessageBox::information(NULL, "提示信息",context,QMessageBox::Ok);
}

//判断仪器是否正确连接
//返回:
//  --> false 失败
//  --> true  成功
bool dlgmodeltest3::judgeYQConnect()
{
    //获取仪器
    for(int i = 0;i < YQMAXCOUNT;i++)
    {
        if(m_pMC->pYQs->pYQ[i])
        {
            pYQ = m_pMC->pYQs->pYQ[i];
            break;
        }
    }
    if(NULL == pYQ)
    {
        PlsSelectMdl(QString::fromUtf8("仪器信息获取失败!"));
        return false;
    }
    else
    {
        return true;
    }
}

void dlgmodeltest3::on_chkSingleCtrl_1_stateChanged(int arg1)
{
    if(false == judgeYQConnect()) return;
    if(pYQ->m_pProcess->pDriver->SendControlCmd(CMD_Linkage,42,1,arg1))
    {
        ReadStatus();
    }
}

void dlgmodeltest3::on_chkSingleCtrl_2_stateChanged(int arg1)
{
    if(false == judgeYQConnect()) return;
    if(pYQ->m_pProcess->pDriver->SendControlCmd(CMD_Linkage,42,2,arg1))
    {
        ReadStatus();
    }
}

void dlgmodeltest3::on_chkSingleCtrl_3_stateChanged(int arg1)
{
    if(false == judgeYQConnect()) return;
    if(pYQ->m_pProcess->pDriver->SendControlCmd(CMD_Linkage,42,3,arg1))
    {
        ReadStatus();
    }
}

void dlgmodeltest3::on_chkSingleCtrl_4_stateChanged(int arg1)
{
    if(false == judgeYQConnect()) return;
    if(pYQ->m_pProcess->pDriver->SendControlCmd(CMD_Linkage,42,4,arg1))
    {
        ReadStatus();
    }
}

void dlgmodeltest3::on_chkSingleCtrl_5_stateChanged(int arg1)
{
    if(false == judgeYQConnect()) return;
    if(pYQ->m_pProcess->pDriver->SendControlCmd(CMD_Linkage,42,5,arg1))
    {
        ReadStatus();
    }
}

void dlgmodeltest3::on_chkSingleCtrl_6_stateChanged(int arg1)
{
    if(false == judgeYQConnect()) return;
    if(pYQ->m_pProcess->pDriver->SendControlCmd(CMD_Linkage,42,6,arg1))
    {
        ReadStatus();
    }
}

void dlgmodeltest3::on_chkSingleCtrl_7_stateChanged(int arg1)
{
    if(false == judgeYQConnect()) return;
    if(pYQ->m_pProcess->pDriver->SendControlCmd(CMD_Linkage,42,7,arg1))
    {
        ReadStatus();
    }
}

void dlgmodeltest3::on_chkSingleCtrl_8_stateChanged(int arg1)
{
    if(false == judgeYQConnect()) return;
    if(pYQ->m_pProcess->pDriver->SendControlCmd(CMD_Linkage,42,8,arg1))
    {
        ReadStatus();
    }
}

void dlgmodeltest3::on_chkSingleCtrl_9_stateChanged(int arg1)
{
    if(false == judgeYQConnect()) return;
    if(pYQ->m_pProcess->pDriver->SendControlCmd(CMD_Linkage,42,9,arg1))
    {
        ReadStatus();
    }
}

void dlgmodeltest3::on_chkSingleCtrl_10_stateChanged(int arg1)
{
    if(false == judgeYQConnect()) return;
    if(pYQ->m_pProcess->pDriver->SendControlCmd(CMD_Linkage,42,10,arg1))
    {
        ReadStatus();
    }
}

void dlgmodeltest3::on_chkSingleCtrl_11_stateChanged(int arg1)
{
    if(false == judgeYQConnect()) return;
    if(pYQ->m_pProcess->pDriver->SendControlCmd(CMD_Linkage,42,11,arg1))
    {
        ReadStatus();
    }
}

void dlgmodeltest3::on_chkSingleCtrl_12_stateChanged(int arg1)
{
    if(false == judgeYQConnect()) return;
    if(pYQ->m_pProcess->pDriver->SendControlCmd(CMD_Linkage,42,12,arg1))
    {
        ReadStatus();
    }
}

void dlgmodeltest3::on_chkSingleCtrl_13_stateChanged(int arg1)
{
    if(false == judgeYQConnect()) return;
    if(pYQ->m_pProcess->pDriver->SendControlCmd(CMD_Linkage,42,13,arg1))
    {
        ReadStatus();
    }
}

void dlgmodeltest3::on_chkSingleCtrl_14_stateChanged(int arg1)
{
    if(false == judgeYQConnect()) return;
    if(pYQ->m_pProcess->pDriver->SendControlCmd(CMD_Linkage,42,14,arg1))
    {
        ReadStatus();
    }
}

void dlgmodeltest3::on_chkSingleCtrl_15_stateChanged(int arg1)
{
    if(false == judgeYQConnect()) return;
    if(pYQ->m_pProcess->pDriver->SendControlCmd(CMD_Linkage,42,15,arg1))
    {
        ReadStatus();
    }
}

void dlgmodeltest3::on_chkSingleCtrl_16_stateChanged(int arg1)
{
    if(false == judgeYQConnect()) return;
    if(pYQ->m_pProcess->pDriver->SendControlCmd(CMD_Linkage,42,16,arg1))
    {
        ReadStatus();
    }
}

void dlgmodeltest3::on_listWidget_clicked(const QModelIndex &index)
{
    m_nRow= index.row();
    UpdateParamName();
}

void dlgmodeltest3::on_btnSend_clicked()
{
    if(-1 == m_nRow)
    {
        dlgRemindMessage *pRemind= new dlgRemindMessage(m_pMC,7);
        pRemind->exec();
        delete pRemind;
        pRemind = NULL;
    }
    else if(0 == m_nRow)
    {
        SendCmd(40, 6);
    }
    else if(1 == m_nRow)
    {
        SendCmd(41, 1);
    }
    else if(2 == m_nRow)
    {
        SendCmd(43, 1);
    }
    else if(3 == m_nRow)
    {
        SendCmd(44, 3);
    }
    else if(4 == m_nRow)
    {
        SendSigleCmd(45);
    }
    else if(5 == m_nRow)
    {
        SendCmd(46, 3);
    }
    else if(6 == m_nRow)
    {
        SendCmd(47, 4);
    }
    else if(7 == m_nRow)
    {
        SendCmd(48, 6);
    }
    else if(8 == m_nRow)
    {
        SendCmd(49, 1);
    }
    else if(9 == m_nRow)
    {
        SendCmd(50, 4);

    }
    else if(10 == m_nRow)
    {
        SendCmd(51, 1);
    }

}
bool dlgmodeltest3::SendSigleCmd(int16_t nCmd)
{
    if(false == judgeYQConnect()) return false;
    unsigned char bBuff[MAX_SIZE];
    memset(bBuff,0,MAX_SIZE);
    int16_t wPrm1 = ui->spinExtractPara_1->currentText().toInt();
    int16_t wPrm2 = ui->spinExtractPara_2->currentText().toInt();
    int16_t wPrm3 = ui->spinExtractPara_31->currentText().toInt();
    bBuff[0] = HIBYTE(nCmd);
    bBuff[1] = LOBYTE(nCmd);
    bBuff[2] = HIBYTE(wPrm1);
    bBuff[3] = LOBYTE(wPrm1);
    bBuff[4] = HIBYTE(wPrm2);
    bBuff[5] = LOBYTE(wPrm2);
    bBuff[6] = HIBYTE(wPrm3);
    bBuff[7] = LOBYTE(wPrm3);

    if (pYQ->m_pProcess->pDriver->WriteModbus(CMD_Linkage,40001,3+1,bBuff))
         return true;
      else
         return false;
}
bool dlgmodeltest3::SendCmd(int16_t nCmd, int nNum)
{
    if(false == judgeYQConnect()) return false;
    int16_t nParam = 0;
    QComboBox *pbs[16] = {ui->spinExtractPara_1, ui->spinExtractPara_2, ui->spinExtractPara_3, ui->spinExtractPara_4,
                           ui->spinExtractPara_5, ui->spinExtractPara_6};
    unsigned char bBuff[MAX_SIZE];
    memset(bBuff,0,MAX_SIZE);

    bBuff[0] = HIBYTE(nCmd);
    bBuff[1] = LOBYTE(nCmd);
    for(int i=1;i<=nNum;i++)
    {
        QComboBox *pb = pbs[i-1];
        nParam = pb->currentText().toInt();
        bBuff[2*i] = HIBYTE(nParam);
        bBuff[2*i+1] = LOBYTE(nParam);
    }
    if (pYQ->m_pProcess->pDriver->WriteModbus(CMD_Linkage,40001,nNum+1,bBuff))
    {
         return true;
    }
    else
    {
         QMessageBox::information(NULL, "提示信息","命令发送失败!");
         return false;
    }
}
void dlgmodeltest3::UpdateParamName()
{
    ui->labelname2->show();
    ui->labelname3->show();
    ui->labelname4->show();
    ui->labelname5->show();
    ui->labelname6->show();
    ui->spinExtractPara_2->show();
    ui->spinExtractPara_3->show();
    ui->spinExtractPara_4->show();
    ui->spinExtractPara_31->show();
    ui->spinExtractPara_5->show();
    ui->spinExtractPara_6->show();
    if(0 == m_nRow)
    {
        ui->labelname1->setText("源电磁阀((1-16)");
        ui->labelname2->setText("液位编号(1-5)");
        ui->labelname3->setText("目标电磁阀(1-16)");
        ui->labelname4->setText("速度(0快1慢)");
        ui->labelname5->setText("源电磁阀(1-16)");
        ui->labelname6->setText("目的电磁阀(1-16)");
    }
    else if(1 == m_nRow)
    {
         ui->labelname1->setText("目标电磁阀(1-16)");
         ui->labelname2->hide();
         ui->labelname3->hide();
         ui->labelname4->hide();
         ui->labelname5->hide();
         ui->labelname6->hide();
         ui->spinExtractPara_2->hide();
         ui->spinExtractPara_3->hide();
         ui->spinExtractPara_4->hide();
         ui->spinExtractPara_31->hide();
         ui->spinExtractPara_5->hide();
         ui->spinExtractPara_6->hide();
    }
    else if(2 == m_nRow)
    {
        ui->labelname1->setText("液位编号(1-4)");
        ui->labelname2->hide();
        ui->labelname3->hide();
        ui->labelname4->hide();
        ui->labelname5->hide();
        ui->labelname6->hide();
        ui->spinExtractPara_2->hide();
        ui->spinExtractPara_3->hide();
        ui->spinExtractPara_4->hide();
        ui->spinExtractPara_31->hide();
        ui->spinExtractPara_5->hide();
        ui->spinExtractPara_6->hide();

    }
    else if(3 == m_nRow)
    {
        ui->labelname1->setText("目标电磁阀(1-16)");
        ui->labelname2->setText("次数");
        ui->labelname3->setText("目标电磁阀2(1-16)");
        ui->labelname4->hide();
        ui->labelname5->hide();
        ui->labelname6->hide();
        ui->spinExtractPara_4->hide();
        ui->spinExtractPara_31->hide();
        ui->spinExtractPara_5->hide();
        ui->spinExtractPara_6->hide();
    }
    else if(4 == m_nRow)
    {
        ui->labelname1->setText("源电池阀(1-16)");
        ui->labelname2->setText("速度(0快1慢)");
        ui->labelname3->setText("步数");
        ui->labelname4->hide();
        ui->labelname5->hide();
        ui->labelname6->hide();
        ui->spinExtractPara_4->hide();
        ui->spinExtractPara_3->hide();
        ui->spinExtractPara_5->hide();
        ui->spinExtractPara_6->hide();
    }
    else if(5 == m_nRow)
    {
        ui->labelname1->setText("目标电磁阀(1-16)");
        ui->labelname2->setText("速度(0快1慢)");
        ui->labelname3->setText("目标电磁阀2(1-16)");
        ui->labelname4->hide();
        ui->labelname5->hide();
        ui->labelname6->hide();
        ui->spinExtractPara_4->hide();
        ui->spinExtractPara_31->hide();
        ui->spinExtractPara_5->hide();
        ui->spinExtractPara_6->hide();
    }
    else if(6 == m_nRow)
    {
        ui->labelname1->setText("源电池阀(1-16)");
        ui->labelname2->setText("目标电磁阀(1-16)");
        ui->labelname3->setText("次数");
        ui->labelname4->setText("源电池阀2(1-16)");
        ui->labelname5->hide();
        ui->labelname6->hide();
        ui->spinExtractPara_31->hide();
        ui->spinExtractPara_5->hide();
        ui->spinExtractPara_6->hide();
    }
    else if(7 == m_nRow)
    {
        ui->labelname1->setText("源电池阀(1-16)");
        ui->labelname2->setText("液位1");
        ui->labelname3->setText("源电池阀2(1-16)");
        ui->labelname4->setText("液位2");
        ui->labelname5->setText("目的电磁阀1(1-16)");
        ui->labelname6->setText("目的电磁阀2(1-16)");
    }
    else if(8 == m_nRow)
    {
        ui->labelname1->setText("目标液位(1-4)");
        ui->labelname2->hide();
        ui->labelname3->hide();
        ui->labelname4->hide();
        ui->labelname5->hide();
        ui->labelname6->hide();
        ui->spinExtractPara_2->hide();
        ui->spinExtractPara_3->hide();
        ui->spinExtractPara_4->hide();
        ui->spinExtractPara_31->hide();
        ui->spinExtractPara_5->hide();
        ui->spinExtractPara_6->hide();
    }
    else if(9 == m_nRow)
    {
        ui->labelname1->setText("源电磁阀((1-16)");
        ui->labelname2->setText("液位编号");
        ui->labelname3->setText("目标电磁阀(1-16)");
        ui->labelname4->setText("速度(0快1慢)");
        ui->labelname5->hide();
        ui->labelname6->hide();
        ui->spinExtractPara_31->hide();
        ui->spinExtractPara_5->hide();
        ui->spinExtractPara_6->hide();

    }
    else if(10 == m_nRow)
    {
        ui->labelname1->setText("废液阀编号(1-16)");
        ui->labelname2->hide();
        ui->labelname3->hide();
        ui->labelname4->hide();
        ui->labelname5->hide();
        ui->labelname6->hide();
        ui->spinExtractPara_2->hide();
        ui->spinExtractPara_3->hide();
        ui->spinExtractPara_4->hide();
        ui->spinExtractPara_31->hide();
        ui->spinExtractPara_5->hide();
        ui->spinExtractPara_6->hide();
    }
}
void dlgmodeltest3::on_btnStatus_clicked()
{
    ReadStatus();
}
void dlgmodeltest3::ReadStatus()
{
    if(false == judgeYQConnect()) return;
    int16_t nStatus = 0;
    unsigned char bBuff[MAX_SIZE];
    memset(bBuff,0,MAX_SIZE);
    usleep(50000);
    if(pYQ->m_pProcess->pDriver->ReadModbus(CMD_Linkage,40052,2,bBuff))
    {
        //获取电磁阀状态，16位当为1时相应的电磁阀打开，0时为关闭
        m_nStatus[0] = bBuff[3] & 0x01; // 最低位
        m_nStatus[1] = ( bBuff[3] & 0x02) >> 1;
        m_nStatus[2] = ( bBuff[3] & 0x04) >> 2;
        m_nStatus[3] = ( bBuff[3] & 0x08) >> 3;
        m_nStatus[4] = ( bBuff[3] & 0x10) >> 4;
        m_nStatus[5] = ( bBuff[3] & 0x20) >> 5;
        m_nStatus[6] = ( bBuff[3] & 0x40) >> 6;
        m_nStatus[7] = ( bBuff[3] & 0x80) >> 7;
        m_nStatus[8] = bBuff[2] & 0x01; // 最低位
        m_nStatus[9] = ( bBuff[2] & 0x02) >> 1;
        m_nStatus[10] = ( bBuff[2] & 0x04) >> 2;
        m_nStatus[11] = ( bBuff[2] & 0x08) >> 3;
        m_nStatus[12] = ( bBuff[2] & 0x10) >> 4;
        m_nStatus[13] = ( bBuff[2] & 0x20) >> 5;
        m_nStatus[14] = ( bBuff[2] & 0x40) >> 6;
        m_nStatus[15] = ( bBuff[2] & 0x80) >> 7;

        QPushButton *pbs[16] = {ui->btnled_1, ui->btnled_2, ui->btnled_3, ui->btnled_4,
                               ui->btnled_5, ui->btnled_6, ui->btnled_7, ui->btnled_8,
                               ui->btnled_9, ui->btnled_10, ui->btnled_11, ui->btnled_12,
                               ui->btnled_13, ui->btnled_14, ui->btnled_15, ui->btnled_16};
//        QCheckBox *pCheckBox[16] = {ui->chkSingleCtrl_1, ui->chkSingleCtrl_2, ui->chkSingleCtrl_3, ui->chkSingleCtrl_4,
//                               ui->chkSingleCtrl_5, ui->chkSingleCtrl_6, ui->chkSingleCtrl_7, ui->chkSingleCtrl_8,
//                               ui->chkSingleCtrl_9, ui->chkSingleCtrl_10,ui->chkSingleCtrl_11,ui->chkSingleCtrl_12,ui->chkSingleCtrl_13,
//                               ui->chkSingleCtrl_14,ui->chkSingleCtrl_15,ui->chkSingleCtrl_16};
        for(int i=0;i<16;i++)
        {
            QPushButton *pb = pbs[i];
//            QCheckBox *pBox = pCheckBox[i];
            if(m_nStatus[i])
            {
                pb->setIcon(QIcon(":/res/green.png"));
                //pBox->setChecked(true);
            }
            else
            {
                pb->setIcon(QIcon(":/res/gray.png"));
                //pBox->setChecked(false);
            }
        }

        nStatus = MAKEWORD(bBuff[0],bBuff[1]);	//40052 模块的工作状态
        if(0 == nStatus)
        {
            ui->labelStatus->setText("模块状态:空闲");
        }
        else if(1 == nStatus)
        {
             ui->labelStatus->setText("模块状态:工作");
        }
        else
        {
            ui->labelStatus->setText("模块状态:信息错误");
        }
    }
    else
    {
        QMessageBox::information(NULL, "提示信息","通讯故障!");
    }
}
