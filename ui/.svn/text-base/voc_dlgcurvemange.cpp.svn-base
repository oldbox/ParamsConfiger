#include "voc_dlgcurvemange.h"
#include "ui_voc_dlgcurvemange.h"
#include "../core/cdbbusiness.h"
#include "../core/myplot.h"
#include "../core/cconfig.h"
#include <QHeaderView>
#include <QTextCodec>
#include <QMessageBox>
#include <QDesktopWidget>
#include "dispdatacurve.h"
#include "./voc_dlgadjustset.h"
voc_dlgCurveMange::voc_dlgCurveMange(QWidget *parent) :
    QDialog(parent),
    m_lineedit(NULL),
    m_row(0),
    m_column(0),
    ui(new Ui::voc_dlgCurveMange)
{
    ui->setupUi(this);
    this->setWindowFlags(Qt::FramelessWindowHint);
    QTextCodec *codec = QTextCodec::codecForName("UTF-8");
    QTextCodec::setCodecForLocale(codec);
    QTextCodec::setCodecForCStrings(codec);
    QTextCodec::setCodecForTr(codec);

    m_bDotsFinish = false;
    m_bRtInitFinsh = false;
    m_pDB = new CDBBusiness("yqdata","yq.db");

    m_plot = new MyPlot(4,ui->widget_curve);
    GetParamDictList();
    InitParamDots();
    m_qsCodeID.clear();

    char tmp[64];memset(tmp,0,64);
    GetAfxConfig()->GetIni("VOC_SET","DataSrc_Noise",tmp);
    int value = atoi(tmp);
    if(value == 1)
    {
        ui->chk_noicepoint->setChecked(true);
        ui->lineEdit_noicePoint->setEnabled(true);
    }
    else
    {
        ui->chk_noicepoint->setChecked(false);
        ui->lineEdit_noicePoint->setEnabled(false);
    }

    GetAfxConfig()->GetIni("VOC_SET","DataSrc_NoiseValue",tmp);
    value = atof(tmp);
    QString qstmp = QString::number(value,10);
    ui->lineEdit_noicePoint->setText(qstmp);

    m_bRtInitFinsh = true;
}

voc_dlgCurveMange::~voc_dlgCurveMange()
{
    if(m_lineedit)
    {
        delete m_lineedit;
        m_lineedit = NULL;
    }
    delete ui;
    delete m_plot;
    m_plot = NULL;
    delete m_pDB;
    m_pDB = NULL;
}
void voc_dlgCurveMange::GetParamDictList()
{
    paramdict dict;
    if(dict.paramlist.size() > 0)
    {
        //隐藏表头
        ui->tableWidget_name->verticalHeader()->setVisible(false);
        ui->tableWidget_name->setShowGrid(true);  // 设置不显示格子线
        ui->tableWidget_name->setSelectionBehavior(QAbstractItemView::SelectRows);  //设置选择行为时每次选择一次
        ui->tableWidget_name->setColumnCount(3);
        ui->tableWidget_name->horizontalHeader()->setResizeMode(QHeaderView::Stretch);

        QStringList name;
        name.push_back("内部代码");
        name.push_back("名称");
        name.push_back("保留时间");
        ui->tableWidget_name->setHorizontalHeaderLabels(name);

        vector<paramitem>::iterator it;
        int iRow = 0;
        QString str;
        QTableWidgetItem* qtItem;
        sqlite_data datalist,dataRT;
        bool isResult = m_pDB->GetYQCode(datalist);

        ui->tableWidget_name->setRowCount(datalist.RowCount());
        if(isResult)
        {
            bool bTag = false;
            for(it = dict.paramlist.begin(); it < dict.paramlist.end(); it++)
            {
                bTag = false;
                for(int i = 1;i<=datalist.RowCount();i++)
                {
                    if(0 == strcmp((*it).LHCodeID,datalist.GetData(i,1)))
                    {
                        bTag = true;
                        break;
                    }
                }
                if(bTag)
                {
                    qtItem = new QTableWidgetItem((*it).LHCodeID);
                    ui->tableWidget_name->setItem(iRow, 0, qtItem);
                    ui->tableWidget_name->item(iRow, 0)->setFlags(Qt::NoItemFlags);

                    qtItem = new QTableWidgetItem((*it).CodeName);
                    ui->tableWidget_name->setItem(iRow, 1, qtItem);

                    if(m_pDB->GetCurve(dataRT,(*it).LHCodeID))
                    {
                        str = dataRT.GetData(1,2);
                        float fTmp = str.toFloat();
                        qtItem = new QTableWidgetItem(QString::number(fTmp,'f',4));
                        ui->tableWidget_name->setItem(iRow, 2, qtItem);
                    }
                    else
                    {
                        str = QString::number(iRow);
                        qtItem = new QTableWidgetItem(str);
                        ui->tableWidget_name->setItem(iRow, 2, qtItem);
                    }
                    iRow++;
                }
            }
        }
    }
}

void voc_dlgCurveMange::InitParamDots()
{
    ui->tableWidget_Dots->verticalHeader()->setVisible(false);
    ui->tableWidget_Dots->setShowGrid(true);  // 设置不显示格子线
    ui->tableWidget_Dots->setSelectionBehavior(QAbstractItemView::SelectRows);  //设置选择行为时每次选择一次
    ui->tableWidget_Dots->setRowCount(6);
    ui->tableWidget_Dots->setColumnCount(2);
    ui->tableWidget_Dots->horizontalHeader()->setResizeMode(QHeaderView::Stretch);
    ui->tableWidget_Dots->setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOff);//去掉水平滚动条
    QStringList name;
    name.push_back("浓度");
    name.push_back("面积");
    ui->tableWidget_Dots->setHorizontalHeaderLabels(name);

    for(int i = 0;i < 7;i++)
    {
        QTableWidgetItem* qtItem;
        qtItem = new QTableWidgetItem("");
        ui->tableWidget_Dots->setItem(i, 0, qtItem);
        qtItem = new QTableWidgetItem("");
        ui->tableWidget_Dots->setItem(i, 1, qtItem);
    }

}
void voc_dlgCurveMange::RefreshDots()
{
    QString qsCodeID = m_qsCodeID;
    if( qsCodeID.size() > 0)
    {
        m_bDotsFinish = false;//防止刷新时不断拟合曲线
        QString str;
        char cTemp[64];memset(cTemp,0,64);
        sqlite_data datalist;
        if(m_pDB->GetDots(datalist,qsCodeID.toLocal8Bit().data()))
        {
            int nRow = datalist.RowCount();
            for(int i = 1;i<=datalist.RowCount();i++)
            {
                str = datalist.GetData(i,1);
                sprintf(cTemp,"%.1f",str.toDouble());
                ui->tableWidget_Dots->item(i-1,0)->setText(cTemp);
                str = datalist.GetData(i,2);
                memset(cTemp,0,64);
                sprintf(cTemp,"%.1f",str.toDouble());
                ui->tableWidget_Dots->item(i-1,1)->setText(cTemp);
            }
            ShowCurve(nRow);
        }
        if(m_pDB->GetCurve(datalist,qsCodeID.toLocal8Bit().data()))
        {
            QString str;
            float K,R,B,KB;

            str = datalist.GetData(1,3);
            if(str.toInt() == 0)
                ui->chkKind->setChecked(false);
            else
                ui->chkKind->setChecked(true);

            str = datalist.GetData(1,4);
            K = str.toFloat();
            str = datalist.GetData(1,5);
            B = str.toFloat();
            str = datalist.GetData(1,6);
            KB = str.toFloat();
            str = datalist.GetData(1,7);
            R = str.toFloat();
            char czCurve[256];memset(czCurve,0,256);
            if(B >= 0)
            {
                 sprintf(czCurve,"Y = %.4eX + %.4e",K,B);
//                if (KB >= 0)
//                    sprintf(czCurve,"Y = %.4e(X - %.4e) + %.4e",K,KB,B);
//                else
//                    sprintf(czCurve,"Y = %.4e(X + %.4e) + %.4e",K,KB,B);
            }
            else
            {
                sprintf(czCurve,"Y = %.4eX - %.4e",K,-1*B);
//                if (KB >= 0)
//                    sprintf(czCurve,"Y = %.4e(X - %.4e) - %.4e",K,KB,-1*B);
//                else
//                    sprintf(czCurve,"Y = %.4e(X + %.4e) - %.4e",K,KB,-1*B);
            }

            ui->label_curve->setText(QString(czCurve));
            ui->label_R->setText(str.number(R,10,4));

            //积分参数
            float fValue = 0.0;
            str = datalist.GetData(1,8);
            ui->lineEdit_WinFactor->setText(str);
            str = datalist.GetData(1,9);
            ui->lineEdit_MinPW->setText(str);
            str = datalist.GetData(1,10);
            ui->lineEdit_MaxPW->setText(str);
            str = datalist.GetData(1,11);
            ui->lineEdit_Miniumum->setText(str);
            str = datalist.GetData(1,12);
            ui->lineEdit_MinArea->setText(str);

        }

        char tmp[64];memset(tmp,0,64);
        GetAfxConfig()->GetIni("VOC_SET","Search_Baseline",tmp);
        float value = atof(tmp);
        QString qstmp = QString::number(value,10,4);
        ui->lineEdit_Baseline->setText(qstmp);

        GetAfxConfig()->GetIni("VOC_SET","Search_ModifyB",tmp);
        value = atof(tmp);
        qstmp = QString::number(value,10,2);
        ui->lineEdit_ModifyB->setText(qstmp);

        m_bDotsFinish = true;
    }
}

void voc_dlgCurveMange::ShowCurve(int nNumber)
{
    m_vtConc.clear();
    m_vtAera.clear();
    QString qsValue;
    double fConc,fArea;
    for(int i=0; i<nNumber;i++)
    {
        qsValue = ui->tableWidget_Dots->item(i,0)->text();
        fConc = qsValue.toDouble();
        qsValue = ui->tableWidget_Dots->item(i,1)->text();
        fArea = qsValue.toDouble();
        if(i == 0)
        {
            m_vtConc.push_back(fConc);
            m_vtAera.push_back(fArea);
        }
        else if(fConc > 0)
        {
            m_vtConc.push_back(fConc);
            m_vtAera.push_back(fArea);
        }
        else
        {
            break;
        }
    }
    if(m_vtConc.size() >= 2)
    {
        m_plot->RemoveCurve();
        m_plot->AddCurve("",m_vtConc, m_vtAera,Qt::blue);
    }
    else
    {
        m_plot->RemoveCurve();
    }
}
//浓度修改
void voc_dlgCurveMange::on_tableWidget_Dots_cellChanged(int row, int column)
{
    if(row >= 0 && m_qsCodeID.size() > 0 && m_bDotsFinish)
    {
        QString strText = ui->tableWidget_Dots->item(row, column)->text();
        float fValue = strText.toFloat();
        if(column == 0)
            m_pDB->SetDotConc(m_qsCodeID.toLocal8Bit().data(),row,fValue);
        else
            m_pDB->SetDotArea(m_qsCodeID.toLocal8Bit().data(),row,fValue);
        CurveCouvade();
    }
}
//参数名和保留时间修改
void voc_dlgCurveMange::on_tableWidget_name_cellChanged(int row, int column)
{
    if(!m_bRtInitFinsh)
        return;
    QString qsCodeID =  ui->tableWidget_name->item(row, 0)->text();
    if(column == 1)//修改参数名
    {

    }
    else if(column == 2)//修改时间
    {
        double fRt = 0;
        QString qsTime =  ui->tableWidget_name->item(row, 2)->text();
        fRt = qsTime.toDouble();
        m_pDB->UpdateRemaintTime(qsCodeID.toLocal8Bit().data(),fRt);
    }
}
//选择变化
void voc_dlgCurveMange::on_tableWidget_name_currentCellChanged(int currentRow, int currentColumn, int previousRow, int previousColumn)
{
    QTableWidgetItem* item = NULL;
    item = ui->tableWidget_name->item(currentRow, 0);
    if(item)
    {
        if(m_lineedit)
        {
            delete m_lineedit;
            m_lineedit = NULL;
        }
        m_qsCodeID = item->text();
        RefreshDots();
    }
}
void voc_dlgCurveMange::CurveCouvade()
{
    int nNumber = 0;
    QString qsValue;
    double fConc,fArea;
    double fZero = 0;
    double K,B,R;
    double Y[5];
    double A[5];
    for(int i = 0;i < 5;i++)
    {
        qsValue = ui->tableWidget_Dots->item(i,0)->text();
        fConc = qsValue.toDouble();
        qsValue = ui->tableWidget_Dots->item(i,1)->text();
        fArea = qsValue.toDouble();
        if(i == 0)
        {
            if(fArea >= 0)
            {
                //fZero = fArea;
                Y[i] = fConc;
                A[i] = fArea - fZero;
                nNumber++;
            }
        }
        else
        {
            if(fConc > 0 && fArea > 0)
            {
                Y[i] = fConc;
                A[i] = fArea - fZero;
                nNumber++;
            }
            else
            {
                break;
            }
        }
    }
    if(nNumber >= 2)
    {
        Couvade(&Y[0],&A[0],nNumber,&K,&B,&R);
        if(m_pDB->UpdateCurve(m_qsCodeID.toLocal8Bit().data(),K,B,fZero,R))
        {
            char czCurve[256];memset(czCurve,0,256);
            if(B > 0)
            {
                sprintf(czCurve,"Y = %.4eX + %.4e",K,B);
//                if (fZero >= 0)
//                    sprintf(czCurve,"Y = %.4e(X - %.4e) + %.4e",K,fZero,B);
//                else
//                    sprintf(czCurve,"Y = %.4e(X + %.4e) + %.4e",K,fZero,B);
            }
            else
            {
                sprintf(czCurve,"Y = %.4eX - %.4e",K,-1*B);
//                if (fZero >= 0)
//                    sprintf(czCurve,"Y = %.4e(X - %.4e) - %.4e",K,fZero,-1*B);
//                else
//                    sprintf(czCurve,"Y = %.4e(X + %.4e) - %.4e",K,fZero,-1*B);
            }

            ui->label_curve->setText(QString(czCurve));
            ui->label_R->setText(qsValue.number(R,10,4));

            ShowCurve(nNumber);
        }
    }
}
void voc_dlgCurveMange::Couvade(double* Y,double* A,int nNumber,double* K,double* B,double* R)
{
    double KSum =0,BSum = 0,KBSum = 0,KSquareSum = 0,BSquareSum = 0;

    for(int i = 0 ; i < nNumber ; i++)
    {
        KSum+= A[i];			//吸光度和
        BSum+= Y[i];			//浓度和
        KBSum+=A[i]*Y[i];		//吸光度乘浓度的和
        KSquareSum+= A[i]*A[i];	//吸光度的平方和
        BSquareSum+= Y[i]*Y[i];	//浓度的平方和
    }

    if(nNumber*KSquareSum - KSum*KSum != 0)
    {
        *K = (nNumber*KBSum - KSum*BSum)/(nNumber*KSquareSum - KSum*KSum);
        *B = (BSum - *K*KSum)/nNumber;
    }
    else
    {
        QMessageBox::information(NULL, "提示信息", "数据有误,除数不能为零!");
    }
    if((nNumber*KSquareSum - KSum*KSum)*(nNumber*BSquareSum - BSum*BSum) > 0)
    {
        *R = (nNumber*KBSum - KSum*BSum)/sqrt((nNumber*KSquareSum - KSum*KSum)*(nNumber*BSquareSum - BSum*BSum));
    }
    else
    {
        QMessageBox::information(NULL, "提示信息", "数据错误,取开方数小于零!");
    }
}

void voc_dlgCurveMange::on_lineEdit_WinFactor_textChanged(const QString &arg1)
{
    QString qsCodeID = m_qsCodeID;
    if( qsCodeID.size() > 0)
    {
        m_pDB->UpdateSearchParam_WinFactor(qsCodeID.toLocal8Bit().data(),arg1.toFloat());
    }
}

void voc_dlgCurveMange::on_lineEdit_MinPW_textChanged(const QString &arg1)
{
    QString qsCodeID = m_qsCodeID;
    if( qsCodeID.size() > 0)
    {
        m_pDB->UpdateSearchParam_MinPW(qsCodeID.toLocal8Bit().data(),arg1.toInt());
    }
}

void voc_dlgCurveMange::on_lineEdit_MaxPW_textChanged(const QString &arg1)
{
    QString qsCodeID = m_qsCodeID;
    if( qsCodeID.size() > 0)
    {
        m_pDB->UpdateSearchParam_MaxPW(qsCodeID.toLocal8Bit().data(),arg1.toInt());
    }
}

void voc_dlgCurveMange::on_lineEdit_Miniumum_textChanged(const QString &arg1)
{
    QString qsCodeID = m_qsCodeID;
    if( qsCodeID.size() > 0)
    {
        m_pDB->UpdateSearchParam_Minimum(qsCodeID.toLocal8Bit().data(),arg1.toFloat());
    }
}

void voc_dlgCurveMange::on_lineEdit_MinArea_textChanged(const QString &arg1)
{
    QString qsCodeID = m_qsCodeID;
    if( qsCodeID.size() > 0)
    {
        m_pDB->UpdateSearchParam_MinArea(qsCodeID.toLocal8Bit().data(),arg1.toFloat());
    }
}

void voc_dlgCurveMange::on_lineEdit_Baseline_textChanged(const QString &arg1)
{
    if(m_bDotsFinish)
         GetAfxConfig()->SetIni("VOC_SET","Search_Baseline",arg1.toLocal8Bit().data());
}


void voc_dlgCurveMange::on_pbtCurve_clicked()
{
    DispDataCurve* pdatacurve = new DispDataCurve();
    pdatacurve->move((qApp->desktop()->width() - pdatacurve->width())/2,(qApp->desktop()->height() - pdatacurve->height())/2);
    pdatacurve->exec();
    delete pdatacurve;
    pdatacurve = NULL;
}

void voc_dlgCurveMange::on_chk_noicepoint_clicked()
{
    if(ui->chk_noicepoint->checkState() == Qt::Checked)
    {
        GetAfxConfig()->SetIni("VOC_SET","DataSrc_Noise","1");
        ui->lineEdit_noicePoint->setEnabled(true);
    }
    else
    {
        GetAfxConfig()->SetIni("VOC_SET","DataSrc_Noise","0");
        ui->lineEdit_noicePoint->setEnabled(false);
    }
}

void voc_dlgCurveMange::on_lineEdit_noicePoint_textChanged(const QString &arg1)
{
     GetAfxConfig()->SetIni("VOC_SET","DataSrc_NoiseValue",arg1.toLocal8Bit().data());
}

void voc_dlgCurveMange::on_pbtClose_clicked()
{
    this->close();
}

void voc_dlgCurveMange::on_tableWidget_Dots_cellDoubleClicked(int row, int column)
{
    if(m_lineedit)
    {
        delete m_lineedit;
        m_lineedit = NULL;
    }
    m_lineedit = new QLineEdit();
    m_row = row;
    m_column = column;

    m_lineedit->setText(ui->tableWidget_Dots->item(row, column)->text());
    ui->tableWidget_Dots->setCellWidget(row,column,m_lineedit);
    connect(m_lineedit, SIGNAL(textChanged(QString)), this , SLOT(OncurveLineEditTextChanged(QString)));
}
void voc_dlgCurveMange::OncurveLineEditTextChanged(const QString arg1)
{
    QTableWidgetItem* item = NULL;
    item = ui->tableWidget_Dots->item(m_row, m_column);
    if(item)
        item->setText(arg1);
}

void voc_dlgCurveMange::on_tableWidget_name_cellDoubleClicked(int row, int column)
{
    if(m_lineedit)
    {
        delete m_lineedit;
        m_lineedit = NULL;
    }
    m_lineedit = new QLineEdit();
    m_row = row;
    m_column = column;

    m_lineedit->setText(ui->tableWidget_name->item(row, column)->text());
    ui->tableWidget_name->setCellWidget(row,column,m_lineedit);
    connect(m_lineedit, SIGNAL(textChanged(QString)), this , SLOT(OnparaLineEditTextChanged(QString)));
}

void voc_dlgCurveMange::OnparaLineEditTextChanged(const QString arg1)
{
    QTableWidgetItem* item = NULL;
    item = ui->tableWidget_name->item(m_row, m_column);
    if(item)
        item->setText(arg1);
}

void voc_dlgCurveMange::on_chkKind_clicked()
{
    QString qsCodeID = m_qsCodeID;
    if( qsCodeID.size() > 0)
    {
        if(ui->chkKind->checkState() == Qt::Checked)
            m_pDB->UpdateSearchParam_Kind(qsCodeID.toLocal8Bit().data(),1);
        else
            m_pDB->UpdateSearchParam_Kind(qsCodeID.toLocal8Bit().data(),0);
    }
}

void voc_dlgCurveMange::on_pbtAdjust_clicked()
{
    voc_DlgAdjustSet dlg;
    dlg.exec();
}

void voc_dlgCurveMange::on_lineEdit_ModifyB_textChanged(const QString &arg1)
{
    if(m_bDotsFinish)
        GetAfxConfig()->SetIni("VOC_SET","Search_ModifyB",arg1.toLocal8Bit().data());
}

void voc_dlgCurveMange::on_tableWidget_Dots_currentCellChanged(int currentRow, int currentColumn, int previousRow, int previousColumn)
{
    if(m_lineedit)
    {
        delete m_lineedit;
        m_lineedit = NULL;
    }
}
